
AVRASM ver. 2.1.30  \\Mac\Home\Desktop\CPS\CA4\CPS_CA4\CentralBoard\Debug\List\CentralBoard.asm Tue Apr 30 17:27:53 2019

\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\CentralBoard\Debug\List\CentralBoard.asm(1088): warning: Register r5 already defined by the .DEF directive
\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\CentralBoard\Debug\List\CentralBoard.asm(1089): warning: Register r4 already defined by the .DEF directive
\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\CentralBoard\Debug\List\CentralBoard.asm(1090): warning: Register r7 already defined by the .DEF directive
\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\CentralBoard\Debug\List\CentralBoard.asm(1091): warning: Register r6 already defined by the .DEF directive
\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\CentralBoard\Debug\List\CentralBoard.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _deviceAddress_0=R5
                 	.DEF _deviceAddress_1=R4
                 	.DEF _state=R7
                 	.DEF _muxSelect=R6
                 	.DEF _data=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003a 	JMP  __RESET
000002 940c 005e 	JMP  _ext_int0_isr
000004 940c 007f 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6164
000034 6174
000035 6920
000036 2073      	.DB  0x64,0x61,0x74,0x61,0x20,0x69,0x73,0x20
000037 6425
000038 0a20
\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\CentralBoard\Debug\List\CentralBoard.asm(1131): warning: .cseg .db misalignment - padding zero byte
000039 0000      	.DB  0x25,0x64,0x20,0xA,0x0
                 __RESET:
00003a 94f8      	CLI
00003b 27ee      	CLR  R30
00003c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003d e0f1      	LDI  R31,1
00003e bffb      	OUT  GICR,R31
00003f bfeb      	OUT  GICR,R30
000040 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000041 e08d      	LDI  R24,(14-2)+1
000042 e0a2      	LDI  R26,2
000043 27bb      	CLR  R27
                 __CLEAR_REG:
000044 93ed      	ST   X+,R30
000045 958a      	DEC  R24
000046 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000047 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000048 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000049 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004a 93ed      	ST   X+,R30
00004b 9701      	SBIW R24,1
00004c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00004d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004e bfed      	OUT  SPL,R30
00004f e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000050 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000051 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000052 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000053 940c 0094 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#define WAIT_FOR_INTERRUPT 0x00
                 ;#define INTERRUPT_RECEIVED 0x01
                 ;#define WAIT_FOR_ADDRESS 0x02
                 ;#define GET_DATA 0x03
                 ;#define SHOW_DATA 0x04
                 ;
                 ;unsigned char deviceAddress_0;
                 ;unsigned char deviceAddress_1;
                 ;unsigned char state;
                 ;unsigned char muxSelect;
                 ;unsigned char data;
                 ;
                 ;void init()
                 ; 0000 0010 {
                 
                 	.CSEG
                 _init:
                 ; .FSTART _init
                 ; 0000 0011     PORTD.0 = 0;
000055 9890      	CBI  0x12,0
                 ; 0000 0012     PORTB.2 = 0;
000056 98c2      	CBI  0x18,2
                 ; 0000 0013     PORTB.3 = 0;
000057 98c3      	CBI  0x18,3
                 ; 0000 0014     state = WAIT_FOR_INTERRUPT;
000058 2477      	CLR  R7
                 ; 0000 0015     deviceAddress_0 = 0;
000059 2455      	CLR  R5
                 ; 0000 0016     deviceAddress_1  = 0;
00005a 2444      	CLR  R4
                 ; 0000 0017     muxSelect = 0x00;
00005b 2466      	CLR  R6
                 ; 0000 0018     data = 0x00;
00005c 2499      	CLR  R9
                 ; 0000 0019 }
00005d 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 001C {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00005e 920a      	ST   -Y,R0
00005f 921a      	ST   -Y,R1
000060 92fa      	ST   -Y,R15
000061 936a      	ST   -Y,R22
000062 937a      	ST   -Y,R23
000063 938a      	ST   -Y,R24
000064 939a      	ST   -Y,R25
000065 93aa      	ST   -Y,R26
000066 93ba      	ST   -Y,R27
000067 93ea      	ST   -Y,R30
000068 93fa      	ST   -Y,R31
000069 b7ef      	IN   R30,SREG
00006a 93ea      	ST   -Y,R30
                 ; 0000 001D     init();
00006b dfe9      	RCALL _init
                 ; 0000 001E     state = INTERRUPT_RECEIVED;
00006c e0e1      	LDI  R30,LOW(1)
00006d 2e7e      	MOV  R7,R30
                 ; 0000 001F     PORTD.0 = 1;
00006e 9a90      	SBI  0x12,0
                 ; 0000 0020     state = WAIT_FOR_ADDRESS;
00006f e0e2      	LDI  R30,LOW(2)
000070 2e7e      	MOV  R7,R30
                 ; 0000 0021 }
000071 91e9      	LD   R30,Y+
000072 bfef      	OUT  SREG,R30
000073 91f9      	LD   R31,Y+
000074 91e9      	LD   R30,Y+
000075 91b9      	LD   R27,Y+
000076 91a9      	LD   R26,Y+
000077 9199      	LD   R25,Y+
000078 9189      	LD   R24,Y+
000079 9179      	LD   R23,Y+
00007a 9169      	LD   R22,Y+
00007b 90f9      	LD   R15,Y+
00007c 9019      	LD   R1,Y+
00007d 9009      	LD   R0,Y+
00007e 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0024 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
00007f 93ea      	ST   -Y,R30
000080 b7ef      	IN   R30,SREG
000081 93ea      	ST   -Y,R30
                 ; 0000 0025     if(state == WAIT_FOR_ADDRESS)
000082 e0e2      	LDI  R30,LOW(2)
000083 15e7      	CP   R30,R7
000084 f459      	BRNE _0xB
                 ; 0000 0026     {
                 ; 0000 0027         PORTD.0 = 1;
000085 9a90      	SBI  0x12,0
                 ; 0000 0028         deviceAddress_0 = PINB.0;
000086 e0e0      	LDI  R30,0
000087 99b0      	SBIC 0x16,0
000088 e0e1      	LDI  R30,1
000089 2e5e      	MOV  R5,R30
                 ; 0000 0029         deviceAddress_1 = PINB.1;
00008a e0e0      	LDI  R30,0
00008b 99b1      	SBIC 0x16,1
00008c e0e1      	LDI  R30,1
00008d 2e4e      	MOV  R4,R30
                 ; 0000 002A         state = GET_DATA;
00008e e0e3      	LDI  R30,LOW(3)
00008f 2e7e      	MOV  R7,R30
                 ; 0000 002B     }
                 ; 0000 002C }
                 _0xB:
000090 91e9      	LD   R30,Y+
000091 bfef      	OUT  SREG,R30
000092 91e9      	LD   R30,Y+
000093 9518      	RETI
                 ; .FEND
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0033 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0034 // Declare your local variables here
                 ; 0000 0035 init();
000094 dfc0      	RCALL _init
                 ; 0000 0036 
                 ; 0000 0037 // Input/Output Ports initialization
                 ; 0000 0038 // Port A initialization
                 ; 0000 0039 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003A DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000095 e0e0      	LDI  R30,LOW(0)
000096 bbea      	OUT  0x1A,R30
                 ; 0000 003B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003C PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000097 bbeb      	OUT  0x1B,R30
                 ; 0000 003D 
                 ; 0000 003E // Port B initialization
                 ; 0000 003F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=In Bit0=In
                 ; 0000 0040 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
000098 e0ec      	LDI  R30,LOW(12)
000099 bbe7      	OUT  0x17,R30
                 ; 0000 0041 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=T Bit0=T
                 ; 0000 0042 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00009a e0e0      	LDI  R30,LOW(0)
00009b bbe8      	OUT  0x18,R30
                 ; 0000 0043 
                 ; 0000 0044 // Port C initialization
                 ; 0000 0045 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0046 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00009c bbe4      	OUT  0x14,R30
                 ; 0000 0047 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0048 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00009d bbe5      	OUT  0x15,R30
                 ; 0000 0049 
                 ; 0000 004A // Port D initialization
                 ; 0000 004B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 004C DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (1<<DDD0);
00009e e0e1      	LDI  R30,LOW(1)
00009f bbe1      	OUT  0x11,R30
                 ; 0000 004D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 004E PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 bbe2      	OUT  0x12,R30
                 ; 0000 004F 
                 ; 0000 0050 // Timer/Counter 0 initialization
                 ; 0000 0051 // Clock source: System Clock
                 ; 0000 0052 // Clock value: Timer 0 Stopped
                 ; 0000 0053 // Mode: Normal top=0xFF
                 ; 0000 0054 // OC0 output: Disconnected
                 ; 0000 0055 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000a2 bfe3      	OUT  0x33,R30
                 ; 0000 0056 TCNT0=0x00;
0000a3 bfe2      	OUT  0x32,R30
                 ; 0000 0057 OCR0=0x00;
0000a4 bfec      	OUT  0x3C,R30
                 ; 0000 0058 
                 ; 0000 0059 // Timer/Counter 1 initialization
                 ; 0000 005A // Clock source: System Clock
                 ; 0000 005B // Clock value: Timer1 Stopped
                 ; 0000 005C // Mode: Normal top=0xFFFF
                 ; 0000 005D // OC1A output: Disconnected
                 ; 0000 005E // OC1B output: Disconnected
                 ; 0000 005F // Noise Canceler: Off
                 ; 0000 0060 // Input Capture on Falling Edge
                 ; 0000 0061 // Timer1 Overflow Interrupt: Off
                 ; 0000 0062 // Input Capture Interrupt: Off
                 ; 0000 0063 // Compare A Match Interrupt: Off
                 ; 0000 0064 // Compare B Match Interrupt: Off
                 ; 0000 0065 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000a5 bdef      	OUT  0x2F,R30
                 ; 0000 0066 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000a6 bdee      	OUT  0x2E,R30
                 ; 0000 0067 TCNT1H=0x00;
0000a7 bded      	OUT  0x2D,R30
                 ; 0000 0068 TCNT1L=0x00;
0000a8 bdec      	OUT  0x2C,R30
                 ; 0000 0069 ICR1H=0x00;
0000a9 bde7      	OUT  0x27,R30
                 ; 0000 006A ICR1L=0x00;
0000aa bde6      	OUT  0x26,R30
                 ; 0000 006B OCR1AH=0x00;
0000ab bdeb      	OUT  0x2B,R30
                 ; 0000 006C OCR1AL=0x00;
0000ac bdea      	OUT  0x2A,R30
                 ; 0000 006D OCR1BH=0x00;
0000ad bde9      	OUT  0x29,R30
                 ; 0000 006E OCR1BL=0x00;
0000ae bde8      	OUT  0x28,R30
                 ; 0000 006F 
                 ; 0000 0070 // Timer/Counter 2 initialization
                 ; 0000 0071 // Clock source: System Clock
                 ; 0000 0072 // Clock value: Timer2 Stopped
                 ; 0000 0073 // Mode: Normal top=0xFF
                 ; 0000 0074 // OC2 output: Disconnected
                 ; 0000 0075 ASSR=0<<AS2;
0000af bde2      	OUT  0x22,R30
                 ; 0000 0076 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000b0 bde5      	OUT  0x25,R30
                 ; 0000 0077 TCNT2=0x00;
0000b1 bde4      	OUT  0x24,R30
                 ; 0000 0078 OCR2=0x00;
0000b2 bde3      	OUT  0x23,R30
                 ; 0000 0079 
                 ; 0000 007A // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 007B TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000b3 bfe9      	OUT  0x39,R30
                 ; 0000 007C 
                 ; 0000 007D // External Interrupt(s) initialization
                 ; 0000 007E // INT0: On
                 ; 0000 007F // INT0 Mode: Rising Edge
                 ; 0000 0080 // INT1: On
                 ; 0000 0081 // INT1 Mode: Rising Edge
                 ; 0000 0082 // INT2: Off
                 ; 0000 0083 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
0000b4 b7eb      	IN   R30,0x3B
0000b5 6ce0      	ORI  R30,LOW(0xC0)
0000b6 bfeb      	OUT  0x3B,R30
                 ; 0000 0084 MCUCR=(1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
0000b7 e0ef      	LDI  R30,LOW(15)
0000b8 bfe5      	OUT  0x35,R30
                 ; 0000 0085 MCUCSR=(0<<ISC2);
0000b9 e0e0      	LDI  R30,LOW(0)
0000ba bfe4      	OUT  0x34,R30
                 ; 0000 0086 GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
0000bb ece0      	LDI  R30,LOW(192)
0000bc bfea      	OUT  0x3A,R30
                 ; 0000 0087 
                 ; 0000 0088 // USART initialization
                 ; 0000 0089 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 008A // USART Receiver: Off
                 ; 0000 008B // USART Transmitter: On
                 ; 0000 008C // USART Mode: Asynchronous
                 ; 0000 008D // USART Baud Rate: 9600
                 ; 0000 008E UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000bd e0e0      	LDI  R30,LOW(0)
0000be b9eb      	OUT  0xB,R30
                 ; 0000 008F UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000bf e0e8      	LDI  R30,LOW(8)
0000c0 b9ea      	OUT  0xA,R30
                 ; 0000 0090 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000c1 e8e6      	LDI  R30,LOW(134)
0000c2 bde0      	OUT  0x20,R30
                 ; 0000 0091 UBRRH=0x00;
0000c3 e0e0      	LDI  R30,LOW(0)
0000c4 bde0      	OUT  0x20,R30
                 ; 0000 0092 UBRRL=0x33;
0000c5 e3e3      	LDI  R30,LOW(51)
0000c6 b9e9      	OUT  0x9,R30
                 ; 0000 0093 
                 ; 0000 0094 // Analog Comparator initialization
                 ; 0000 0095 // Analog Comparator: Off
                 ; 0000 0096 // The Analog Comparator's positive input is
                 ; 0000 0097 // connected to the AIN0 pin
                 ; 0000 0098 // The Analog Comparator's negative input is
                 ; 0000 0099 // connected to the AIN1 pin
                 ; 0000 009A ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000c7 e8e0      	LDI  R30,LOW(128)
0000c8 b9e8      	OUT  0x8,R30
                 ; 0000 009B SFIOR=(0<<ACME);
0000c9 e0e0      	LDI  R30,LOW(0)
0000ca bfe0      	OUT  0x30,R30
                 ; 0000 009C 
                 ; 0000 009D // ADC initialization
                 ; 0000 009E // ADC disabled
                 ; 0000 009F ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000cb b9e6      	OUT  0x6,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // SPI initialization
                 ; 0000 00A2 // SPI disabled
                 ; 0000 00A3 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000cc b9ed      	OUT  0xD,R30
                 ; 0000 00A4 
                 ; 0000 00A5 // TWI initialization
                 ; 0000 00A6 // TWI disabled
                 ; 0000 00A7 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000cd bfe6      	OUT  0x36,R30
                 ; 0000 00A8 
                 ; 0000 00A9 // Global enable interrupts
                 ; 0000 00AA #asm("sei")
0000ce 9478      	sei
                 ; 0000 00AB 
                 ; 0000 00AC while (1)
                 _0xE:
                 ; 0000 00AD       {
                 ; 0000 00AE        if(state == GET_DATA)
0000cf e0e3      	LDI  R30,LOW(3)
0000d0 15e7      	CP   R30,R7
0000d1 f481      	BRNE _0x11
                 ; 0000 00AF         {
                 ; 0000 00B0             PORTB.3 = deviceAddress_1;
0000d2 2de4      	MOV  R30,R4
0000d3 30e0      	CPI  R30,0
0000d4 f411      	BRNE _0x12
0000d5 98c3      	CBI  0x18,3
0000d6 c001      	RJMP _0x13
                 _0x12:
0000d7 9ac3      	SBI  0x18,3
                 _0x13:
                 ; 0000 00B1             PORTB.2 = deviceAddress_0;
0000d8 2de5      	MOV  R30,R5
0000d9 30e0      	CPI  R30,0
0000da f411      	BRNE _0x14
0000db 98c2      	CBI  0x18,2
0000dc c001      	RJMP _0x15
                 _0x14:
0000dd 9ac2      	SBI  0x18,2
                 _0x15:
                 ; 0000 00B2             //read data from mux
                 ; 0000 00B3             data = PINC;
0000de b293      	IN   R9,19
                 ; 0000 00B4             state = SHOW_DATA;
0000df e0e4      	LDI  R30,LOW(4)
0000e0 2e7e      	MOV  R7,R30
                 ; 0000 00B5         }
                 ; 0000 00B6         else if(state == SHOW_DATA)
0000e1 c012      	RJMP _0x16
                 _0x11:
0000e2 e0e4      	LDI  R30,LOW(4)
0000e3 15e7      	CP   R30,R7
0000e4 f479      	BRNE _0x17
                 ; 0000 00B7         {
                 ; 0000 00B8             //showing data
                 ; 0000 00B9             printf("data is %d \n", data);
                +
0000e5 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000e6 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000e7 93fa      	ST   -Y,R31
0000e8 93ea      	ST   -Y,R30
0000e9 2de9      	MOV  R30,R9
0000ea 27ff      	CLR  R31
0000eb 2766      	CLR  R22
0000ec 2777      	CLR  R23
0000ed 940e 02b1 	CALL __PUTPARD1
0000ef e084      	LDI  R24,4
0000f0 940e 023e 	CALL _printf
0000f2 9626      	ADIW R28,6
                 ; 0000 00BA             init();
0000f3 df61      	RCALL _init
                 ; 0000 00BB         }
                 ; 0000 00BC 
                 ; 0000 00BD       }
                 _0x17:
                 _0x16:
0000f4 cfda      	RJMP _0xE
                 ; 0000 00BE }
                 _0x18:
0000f5 cfff      	RJMP _0x18
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
0000f6 93aa      	ST   -Y,R26
                 putchar0:
0000f7 9b5d           sbis usr,udre
0000f8 cffe           rjmp putchar0
0000f9 81e8           ld   r30,y
0000fa b9ec           out  udr,r30
0000fb 9621      	ADIW R28,1
0000fc 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
0000fd 93ba      	ST   -Y,R27
0000fe 93aa      	ST   -Y,R26
0000ff 81aa      	LDD  R26,Y+2
000100 dff5      	RCALL _putchar
000101 81a8      	LD   R26,Y
000102 81b9      	LDD  R27,Y+1
000103 91ed      	LD   R30,X+
000104 91fd      	LD   R31,X+
000105 9631      	ADIW R30,1
000106 93fe      	ST   -X,R31
000107 93ee      	ST   -X,R30
000108 9623      	ADIW R28,3
000109 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00010a 93ba      	ST   -Y,R27
00010b 93aa      	ST   -Y,R26
00010c 9726      	SBIW R28,6
00010d 940e 02b6 	CALL __SAVELOCR6
00010f e010      	LDI  R17,0
000110 85ac      	LDD  R26,Y+12
000111 85bd      	LDD  R27,Y+12+1
000112 e0e0      	LDI  R30,LOW(0)
000113 e0f0      	LDI  R31,HIGH(0)
000114 93ed      	ST   X+,R30
000115 93fc      	ST   X,R31
                 _0x2000016:
000116 89ea      	LDD  R30,Y+18
000117 89fb      	LDD  R31,Y+18+1
000118 9631      	ADIW R30,1
000119 8bea      	STD  Y+18,R30
00011a 8bfb      	STD  Y+18+1,R31
00011b 9731      	SBIW R30,1
00011c 91e4      	LPM  R30,Z
00011d 2f2e      	MOV  R18,R30
00011e 30e0      	CPI  R30,0
00011f f409      	BRNE PC+2
000120 c115      	RJMP _0x2000018
000121 2fe1      	MOV  R30,R17
000122 30e0      	CPI  R30,0
000123 f439      	BRNE _0x200001C
000124 3225      	CPI  R18,37
000125 f411      	BRNE _0x200001D
000126 e011      	LDI  R17,LOW(1)
000127 c002      	RJMP _0x200001E
                 _0x200001D:
000128 940e 027c 	CALL SUBOPT_0x0
                 _0x200001E:
00012a c10a      	RJMP _0x200001B
                 _0x200001C:
00012b 30e1      	CPI  R30,LOW(0x1)
00012c f4a9      	BRNE _0x200001F
00012d 3225      	CPI  R18,37
00012e f419      	BRNE _0x2000020
00012f 940e 027c 	CALL SUBOPT_0x0
000131 c102      	RJMP _0x20000CC
                 _0x2000020:
000132 e012      	LDI  R17,LOW(2)
000133 e040      	LDI  R20,LOW(0)
000134 e000      	LDI  R16,LOW(0)
000135 322d      	CPI  R18,45
000136 f411      	BRNE _0x2000021
000137 e001      	LDI  R16,LOW(1)
000138 c0fc      	RJMP _0x200001B
                 _0x2000021:
000139 322b      	CPI  R18,43
00013a f411      	BRNE _0x2000022
00013b e24b      	LDI  R20,LOW(43)
00013c c0f8      	RJMP _0x200001B
                 _0x2000022:
00013d 3220      	CPI  R18,32
00013e f411      	BRNE _0x2000023
00013f e240      	LDI  R20,LOW(32)
000140 c0f4      	RJMP _0x200001B
                 _0x2000023:
000141 c002      	RJMP _0x2000024
                 _0x200001F:
000142 30e2      	CPI  R30,LOW(0x2)
000143 f439      	BRNE _0x2000025
                 _0x2000024:
000144 e050      	LDI  R21,LOW(0)
000145 e013      	LDI  R17,LOW(3)
000146 3320      	CPI  R18,48
000147 f411      	BRNE _0x2000026
000148 6800      	ORI  R16,LOW(128)
000149 c0eb      	RJMP _0x200001B
                 _0x2000026:
00014a c003      	RJMP _0x2000027
                 _0x2000025:
00014b 30e3      	CPI  R30,LOW(0x3)
00014c f009      	BREQ PC+2
00014d c0e7      	RJMP _0x200001B
                 _0x2000027:
00014e 3320      	CPI  R18,48
00014f f010      	BRLO _0x200002A
000150 332a      	CPI  R18,58
000151 f008      	BRLO _0x200002B
                 _0x200002A:
000152 c007      	RJMP _0x2000029
                 _0x200002B:
000153 e0aa      	LDI  R26,LOW(10)
000154 9f5a      	MUL  R21,R26
000155 2d50      	MOV  R21,R0
000156 2fe2      	MOV  R30,R18
000157 53e0      	SUBI R30,LOW(48)
000158 0f5e      	ADD  R21,R30
000159 c0db      	RJMP _0x200001B
                 _0x2000029:
00015a 2fe2      	MOV  R30,R18
00015b 36e3      	CPI  R30,LOW(0x63)
00015c f449      	BRNE _0x200002F
00015d 940e 0283 	CALL SUBOPT_0x1
00015f 89e8      	LDD  R30,Y+16
000160 89f9      	LDD  R31,Y+16+1
000161 81a4      	LDD  R26,Z+4
000162 93aa      	ST   -Y,R26
000163 940e 0289 	CALL SUBOPT_0x2
000165 c0ce      	RJMP _0x2000030
                 _0x200002F:
000166 37e3      	CPI  R30,LOW(0x73)
000167 f441      	BRNE _0x2000032
000168 940e 0283 	CALL SUBOPT_0x1
00016a 940e 028f 	CALL SUBOPT_0x3
00016c 940e 0263 	CALL _strlen
00016e 2f1e      	MOV  R17,R30
00016f c00a      	RJMP _0x2000033
                 _0x2000032:
000170 37e0      	CPI  R30,LOW(0x70)
000171 f461      	BRNE _0x2000035
000172 940e 0283 	CALL SUBOPT_0x1
000174 940e 028f 	CALL SUBOPT_0x3
000176 940e 026f 	CALL _strlenf
000178 2f1e      	MOV  R17,R30
000179 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00017a 6002      	ORI  R16,LOW(2)
00017b 770f      	ANDI R16,LOW(127)
00017c e030      	LDI  R19,LOW(0)
00017d c034      	RJMP _0x2000036
                 _0x2000035:
00017e 36e4      	CPI  R30,LOW(0x64)
00017f f011      	BREQ _0x2000039
000180 36e9      	CPI  R30,LOW(0x69)
000181 f411      	BRNE _0x200003A
                 _0x2000039:
000182 6004      	ORI  R16,LOW(4)
000183 c002      	RJMP _0x200003B
                 _0x200003A:
000184 37e5      	CPI  R30,LOW(0x75)
000185 f431      	BRNE _0x200003C
                 _0x200003B:
000186 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000187 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000188 83ee      	STD  Y+6,R30
000189 83ff      	STD  Y+6+1,R31
00018a e015      	LDI  R17,LOW(5)
00018b c00c      	RJMP _0x200003D
                 _0x200003C:
00018c 35e8      	CPI  R30,LOW(0x58)
00018d f411      	BRNE _0x200003F
00018e 6008      	ORI  R16,LOW(8)
00018f c003      	RJMP _0x2000040
                 _0x200003F:
000190 37e8      	CPI  R30,LOW(0x78)
000191 f009      	BREQ PC+2
000192 c0a1      	RJMP _0x2000071
                 _0x2000040:
000193 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000194 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000195 83ee      	STD  Y+6,R30
000196 83ff      	STD  Y+6+1,R31
000197 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000198 ff02      	SBRS R16,2
000199 c014      	RJMP _0x2000042
00019a 940e 0283 	CALL SUBOPT_0x1
00019c 940e 0299 	CALL SUBOPT_0x4
00019e 85ab      	LDD  R26,Y+11
00019f 23aa      	TST  R26
0001a0 f43a      	BRPL _0x2000043
0001a1 85ea      	LDD  R30,Y+10
0001a2 85fb      	LDD  R31,Y+10+1
0001a3 940e 02a5 	CALL __ANEGW1
0001a5 87ea      	STD  Y+10,R30
0001a6 87fb      	STD  Y+10+1,R31
0001a7 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001a8 3040      	CPI  R20,0
0001a9 f011      	BREQ _0x2000044
0001aa 5f1f      	SUBI R17,-LOW(1)
0001ab c001      	RJMP _0x2000045
                 _0x2000044:
0001ac 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001ad c004      	RJMP _0x2000046
                 _0x2000042:
0001ae 940e 0283 	CALL SUBOPT_0x1
0001b0 940e 0299 	CALL SUBOPT_0x4
                 _0x2000046:
                 _0x2000036:
0001b2 fd00      	SBRC R16,0
0001b3 c011      	RJMP _0x2000047
                 _0x2000048:
0001b4 1715      	CP   R17,R21
0001b5 f478      	BRSH _0x200004A
0001b6 ff07      	SBRS R16,7
0001b7 c008      	RJMP _0x200004B
0001b8 ff02      	SBRS R16,2
0001b9 c004      	RJMP _0x200004C
0001ba 7f0b      	ANDI R16,LOW(251)
0001bb 2f24      	MOV  R18,R20
0001bc 5011      	SUBI R17,LOW(1)
0001bd c001      	RJMP _0x200004D
                 _0x200004C:
0001be e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001bf c001      	RJMP _0x200004E
                 _0x200004B:
0001c0 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001c1 940e 027c 	CALL SUBOPT_0x0
0001c3 5051      	SUBI R21,LOW(1)
0001c4 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001c5 2f31      	MOV  R19,R17
0001c6 ff01      	SBRS R16,1
0001c7 c017      	RJMP _0x200004F
                 _0x2000050:
0001c8 3030      	CPI  R19,0
0001c9 f0a1      	BREQ _0x2000052
0001ca ff03      	SBRS R16,3
0001cb c006      	RJMP _0x2000053
0001cc 81ee      	LDD  R30,Y+6
0001cd 81ff      	LDD  R31,Y+6+1
0001ce 9125      	LPM  R18,Z+
0001cf 83ee      	STD  Y+6,R30
0001d0 83ff      	STD  Y+6+1,R31
0001d1 c005      	RJMP _0x2000054
                 _0x2000053:
0001d2 81ae      	LDD  R26,Y+6
0001d3 81bf      	LDD  R27,Y+6+1
0001d4 912d      	LD   R18,X+
0001d5 83ae      	STD  Y+6,R26
0001d6 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001d7 940e 027c 	CALL SUBOPT_0x0
0001d9 3050      	CPI  R21,0
0001da f009      	BREQ _0x2000055
0001db 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001dc 5031      	SUBI R19,LOW(1)
0001dd cfea      	RJMP _0x2000050
                 _0x2000052:
0001de c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001df e320      	LDI  R18,LOW(48)
0001e0 81ee      	LDD  R30,Y+6
0001e1 81ff      	LDD  R31,Y+6+1
0001e2 940e 02ad 	CALL __GETW1PF
0001e4 87e8      	STD  Y+8,R30
0001e5 87f9      	STD  Y+8+1,R31
0001e6 81ee      	LDD  R30,Y+6
0001e7 81ff      	LDD  R31,Y+6+1
0001e8 9632      	ADIW R30,2
0001e9 83ee      	STD  Y+6,R30
0001ea 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0001eb 85e8      	LDD  R30,Y+8
0001ec 85f9      	LDD  R31,Y+8+1
0001ed 85aa      	LDD  R26,Y+10
0001ee 85bb      	LDD  R27,Y+10+1
0001ef 17ae      	CP   R26,R30
0001f0 07bf      	CPC  R27,R31
0001f1 f050      	BRLO _0x200005C
0001f2 5f2f      	SUBI R18,-LOW(1)
0001f3 85a8      	LDD  R26,Y+8
0001f4 85b9      	LDD  R27,Y+8+1
0001f5 85ea      	LDD  R30,Y+10
0001f6 85fb      	LDD  R31,Y+10+1
0001f7 1bea      	SUB  R30,R26
0001f8 0bfb      	SBC  R31,R27
0001f9 87ea      	STD  Y+10,R30
0001fa 87fb      	STD  Y+10+1,R31
0001fb cfef      	RJMP _0x200005A
                 _0x200005C:
0001fc 332a      	CPI  R18,58
0001fd f028      	BRLO _0x200005D
0001fe ff03      	SBRS R16,3
0001ff c002      	RJMP _0x200005E
000200 5f29      	SUBI R18,-LOW(7)
000201 c001      	RJMP _0x200005F
                 _0x200005E:
000202 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000203 fd04      	SBRC R16,4
000204 c01a      	RJMP _0x2000061
000205 3321      	CPI  R18,49
000206 f420      	BRSH _0x2000063
000207 85a8      	LDD  R26,Y+8
000208 85b9      	LDD  R27,Y+8+1
000209 9711      	SBIW R26,1
00020a f409      	BRNE _0x2000062
                 _0x2000063:
00020b c009      	RJMP _0x20000CD
                 _0x2000062:
00020c 1753      	CP   R21,R19
00020d f010      	BRLO _0x2000067
00020e ff00      	SBRS R16,0
00020f c001      	RJMP _0x2000068
                 _0x2000067:
000210 c013      	RJMP _0x2000066
                 _0x2000068:
000211 e220      	LDI  R18,LOW(32)
000212 ff07      	SBRS R16,7
000213 c00b      	RJMP _0x2000069
000214 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000215 6100      	ORI  R16,LOW(16)
000216 ff02      	SBRS R16,2
000217 c007      	RJMP _0x200006A
000218 7f0b      	ANDI R16,LOW(251)
000219 934a      	ST   -Y,R20
00021a 940e 0289 	CALL SUBOPT_0x2
00021c 3050      	CPI  R21,0
00021d f009      	BREQ _0x200006B
00021e 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00021f 940e 027c 	CALL SUBOPT_0x0
000221 3050      	CPI  R21,0
000222 f009      	BREQ _0x200006C
000223 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000224 5031      	SUBI R19,LOW(1)
000225 85a8      	LDD  R26,Y+8
000226 85b9      	LDD  R27,Y+8+1
000227 9712      	SBIW R26,2
000228 f008      	BRLO _0x2000059
000229 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00022a ff00      	SBRS R16,0
00022b c008      	RJMP _0x200006D
                 _0x200006E:
00022c 3050      	CPI  R21,0
00022d f031      	BREQ _0x2000070
00022e 5051      	SUBI R21,LOW(1)
00022f e2e0      	LDI  R30,LOW(32)
000230 93ea      	ST   -Y,R30
000231 940e 0289 	CALL SUBOPT_0x2
000233 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000234 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000235 cee0      	RJMP _0x2000016
                 _0x2000018:
000236 85ac      	LDD  R26,Y+12
000237 85bd      	LDD  R27,Y+12+1
000238 940e 02a9 	CALL __GETW1P
00023a 940e 02bd 	CALL __LOADLOCR6
00023c 9664      	ADIW R28,20
00023d 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
00023e 92ff      	PUSH R15
00023f 2ef8      	MOV  R15,R24
000240 9726      	SBIW R28,6
000241 931a      	ST   -Y,R17
000242 930a      	ST   -Y,R16
000243 01de      	MOVW R26,R28
000244 9614      	ADIW R26,4
000245 940e 02a1 	CALL __ADDW2R15
000247 018d      	MOVW R16,R26
000248 e0e0      	LDI  R30,LOW(0)
000249 83ec      	STD  Y+4,R30
00024a 83ed      	STD  Y+4+1,R30
00024b 83ee      	STD  Y+6,R30
00024c 83ef      	STD  Y+6+1,R30
00024d 01de      	MOVW R26,R28
00024e 9618      	ADIW R26,8
00024f 940e 02a1 	CALL __ADDW2R15
000251 940e 02a9 	CALL __GETW1P
000253 93fa      	ST   -Y,R31
000254 93ea      	ST   -Y,R30
000255 931a      	ST   -Y,R17
000256 930a      	ST   -Y,R16
000257 efed      	LDI  R30,LOW(_put_usart_G100)
000258 e0f0      	LDI  R31,HIGH(_put_usart_G100)
000259 93fa      	ST   -Y,R31
00025a 93ea      	ST   -Y,R30
00025b 01de      	MOVW R26,R28
00025c 9618      	ADIW R26,8
00025d deac      	RCALL __print_G100
00025e 8119      	LDD  R17,Y+1
00025f 8108      	LDD  R16,Y+0
000260 9628      	ADIW R28,8
000261 90ff      	POP  R15
000262 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000263 93ba      	ST   -Y,R27
000264 93aa      	ST   -Y,R26
000265 91a9          ld   r26,y+
000266 91b9          ld   r27,y+
000267 27ee          clr  r30
000268 27ff          clr  r31
                 strlen0:
000269 916d          ld   r22,x+
00026a 2366          tst  r22
00026b f011          breq strlen1
00026c 9631          adiw r30,1
00026d cffb          rjmp strlen0
                 strlen1:
00026e 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00026f 93ba      	ST   -Y,R27
000270 93aa      	ST   -Y,R26
000271 27aa          clr  r26
000272 27bb          clr  r27
000273 91e9          ld   r30,y+
000274 91f9          ld   r31,y+
                 strlenf0:
000275 9005      	lpm  r0,z+
000276 2000          tst  r0
000277 f011          breq strlenf1
000278 9611          adiw r26,1
000279 cffb          rjmp strlenf0
                 strlenf1:
00027a 01fd          movw r30,r26
00027b 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
00027c 932a      	ST   -Y,R18
00027d 85ad      	LDD  R26,Y+13
00027e 85be      	LDD  R27,Y+13+1
00027f 85ef      	LDD  R30,Y+15
000280 89f8      	LDD  R31,Y+15+1
000281 9509      	ICALL
000282 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000283 89e8      	LDD  R30,Y+16
000284 89f9      	LDD  R31,Y+16+1
000285 9734      	SBIW R30,4
000286 8be8      	STD  Y+16,R30
000287 8bf9      	STD  Y+16+1,R31
000288 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000289 85ad      	LDD  R26,Y+13
00028a 85be      	LDD  R27,Y+13+1
00028b 85ef      	LDD  R30,Y+15
00028c 89f8      	LDD  R31,Y+15+1
00028d 9509      	ICALL
00028e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
00028f 89a8      	LDD  R26,Y+16
000290 89b9      	LDD  R27,Y+16+1
000291 9614      	ADIW R26,4
000292 940e 02a9 	CALL __GETW1P
000294 83ee      	STD  Y+6,R30
000295 83ff      	STD  Y+6+1,R31
000296 81ae      	LDD  R26,Y+6
000297 81bf      	LDD  R27,Y+6+1
000298 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000299 89a8      	LDD  R26,Y+16
00029a 89b9      	LDD  R27,Y+16+1
00029b 9614      	ADIW R26,4
00029c 940e 02a9 	CALL __GETW1P
00029e 87ea      	STD  Y+10,R30
00029f 87fb      	STD  Y+10+1,R31
0002a0 9508      	RET
                 
                 
                 	.CSEG
                 __ADDW2R15:
0002a1 2400      	CLR  R0
0002a2 0daf      	ADD  R26,R15
0002a3 1db0      	ADC  R27,R0
0002a4 9508      	RET
                 
                 __ANEGW1:
0002a5 95f1      	NEG  R31
0002a6 95e1      	NEG  R30
0002a7 40f0      	SBCI R31,0
0002a8 9508      	RET
                 
                 __GETW1P:
0002a9 91ed      	LD   R30,X+
0002aa 91fc      	LD   R31,X
0002ab 9711      	SBIW R26,1
0002ac 9508      	RET
                 
                 __GETW1PF:
0002ad 9005      	LPM  R0,Z+
0002ae 91f4      	LPM  R31,Z
0002af 2de0      	MOV  R30,R0
0002b0 9508      	RET
                 
                 __PUTPARD1:
0002b1 937a      	ST   -Y,R23
0002b2 936a      	ST   -Y,R22
0002b3 93fa      	ST   -Y,R31
0002b4 93ea      	ST   -Y,R30
0002b5 9508      	RET
                 
                 __SAVELOCR6:
0002b6 935a      	ST   -Y,R21
                 __SAVELOCR5:
0002b7 934a      	ST   -Y,R20
                 __SAVELOCR4:
0002b8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002b9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002ba 931a      	ST   -Y,R17
0002bb 930a      	ST   -Y,R16
0002bc 9508      	RET
                 
                 __LOADLOCR6:
0002bd 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0002be 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0002bf 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002c0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002c1 8119      	LDD  R17,Y+1
0002c2 8108      	LD   R16,Y
0002c3 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   9 r1 :   2 r2 :   0 r3 :   0 r4 :   3 r5 :   3 r6 :   1 r7 :   8 
r8 :   0 r9 :   3 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  30 r17:  19 r18:  27 r19:   8 r20:   9 r21:  17 r22:   6 r23:   4 
r24:   8 r25:   3 r26:  49 r27:  26 r28:  11 r29:   1 r30: 183 r31:  47 
x  :  12 y  : 152 z  :   6 
Registers used: 27 out of 35 (77.1%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :  15 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  11 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   0 brne  :  24 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  31 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  15 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   6 cpc   :   1 cpi   :  31 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   0 jmp   :  22 ld    :  27 ldd   :  57 ldi   :  70 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  20 movw  :   5 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   7 out   :  49 pop   :   1 push  :   1 rcall :   5 ret   :  19 
reti  :   2 rjmp  :  55 rol   :   0 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :   4 sbic  :   2 sbis  :   1 sbiw  :   8 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  53 std   :  28 sts   :   0 sub   :   1 subi  :  13 swap  :   0 
tst   :   3 wdr   :   0 
Instructions used: 50 out of 116 (43.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000588   1384     32   1416   32768   4.3%
[.dseg] 0x000060 0x000260      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
