
AVRASM ver. 2.1.30  \\Mac\Home\Desktop\CPS\CA4\CPS_CA4\CentralBoard\Debug\List\CentralBoard.asm Tue Apr 30 17:55:05 2019

\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\CentralBoard\Debug\List\CentralBoard.asm(1088): warning: Register r5 already defined by the .DEF directive
\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\CentralBoard\Debug\List\CentralBoard.asm(1089): warning: Register r4 already defined by the .DEF directive
\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\CentralBoard\Debug\List\CentralBoard.asm(1090): warning: Register r7 already defined by the .DEF directive
\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\CentralBoard\Debug\List\CentralBoard.asm(1091): warning: Register r6 already defined by the .DEF directive
\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\CentralBoard\Debug\List\CentralBoard.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _deviceAddress_0=R5
                 	.DEF _deviceAddress_1=R4
                 	.DEF _state=R7
                 	.DEF _muxSelect=R6
                 	.DEF _data=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0041 	JMP  __RESET
000002 940c 0065 	JMP  _ext_int0_isr
000004 940c 0086 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6164
000034 6174
000035 6920
000036 2073      	.DB  0x64,0x61,0x74,0x61,0x20,0x69,0x73,0x20
000037 6425
000038 6620
000039 726f
00003a 6420      	.DB  0x25,0x64,0x20,0x66,0x6F,0x72,0x20,0x64
00003b 7665
00003c 6369
00003d 2065
00003e 6425      	.DB  0x65,0x76,0x69,0x63,0x65,0x20,0x25,0x64
00003f 0a20
000040 000a      	.DB  0x20,0xA,0xA,0x0
                 __RESET:
000041 94f8      	CLI
000042 27ee      	CLR  R30
000043 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000044 e0f1      	LDI  R31,1
000045 bffb      	OUT  GICR,R31
000046 bfeb      	OUT  GICR,R30
000047 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000048 e08d      	LDI  R24,(14-2)+1
000049 e0a2      	LDI  R26,2
00004a 27bb      	CLR  R27
                 __CLEAR_REG:
00004b 93ed      	ST   X+,R30
00004c 958a      	DEC  R24
00004d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004f e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000050 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000051 93ed      	ST   X+,R30
000052 9701      	SBIW R24,1
000053 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000054 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000055 bfed      	OUT  SPL,R30
000056 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000057 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000058 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000059 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005a 940c 009b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#define WAIT_FOR_INTERRUPT 0x00
                 ;#define INTERRUPT_RECEIVED 0x01
                 ;#define WAIT_FOR_ADDRESS 0x02
                 ;#define GET_DATA 0x03
                 ;#define SHOW_DATA 0x04
                 ;
                 ;unsigned char deviceAddress_0;
                 ;unsigned char deviceAddress_1;
                 ;unsigned char state;
                 ;unsigned char muxSelect;
                 ;unsigned char data;
                 ;
                 ;void init()
                 ; 0000 0010 {
                 
                 	.CSEG
                 _init:
                 ; .FSTART _init
                 ; 0000 0011     PORTD.0 = 0;
00005c 9890      	CBI  0x12,0
                 ; 0000 0012     PORTB.2 = 0;
00005d 98c2      	CBI  0x18,2
                 ; 0000 0013     PORTB.3 = 0;
00005e 98c3      	CBI  0x18,3
                 ; 0000 0014     state = WAIT_FOR_INTERRUPT;
00005f 2477      	CLR  R7
                 ; 0000 0015     deviceAddress_0 = 0;
000060 2455      	CLR  R5
                 ; 0000 0016     deviceAddress_1  = 0;
000061 2444      	CLR  R4
                 ; 0000 0017     muxSelect = 0x00;
000062 2466      	CLR  R6
                 ; 0000 0018     data = 0x00;
000063 2499      	CLR  R9
                 ; 0000 0019 }
000064 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 001C {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000065 920a      	ST   -Y,R0
000066 921a      	ST   -Y,R1
000067 92fa      	ST   -Y,R15
000068 936a      	ST   -Y,R22
000069 937a      	ST   -Y,R23
00006a 938a      	ST   -Y,R24
00006b 939a      	ST   -Y,R25
00006c 93aa      	ST   -Y,R26
00006d 93ba      	ST   -Y,R27
00006e 93ea      	ST   -Y,R30
00006f 93fa      	ST   -Y,R31
000070 b7ef      	IN   R30,SREG
000071 93ea      	ST   -Y,R30
                 ; 0000 001D     init();
000072 dfe9      	RCALL _init
                 ; 0000 001E     state = INTERRUPT_RECEIVED;
000073 e0e1      	LDI  R30,LOW(1)
000074 2e7e      	MOV  R7,R30
                 ; 0000 001F     PORTD.0 = 1;
000075 9a90      	SBI  0x12,0
                 ; 0000 0020     state = WAIT_FOR_ADDRESS;
000076 e0e2      	LDI  R30,LOW(2)
000077 2e7e      	MOV  R7,R30
                 ; 0000 0021 }
000078 91e9      	LD   R30,Y+
000079 bfef      	OUT  SREG,R30
00007a 91f9      	LD   R31,Y+
00007b 91e9      	LD   R30,Y+
00007c 91b9      	LD   R27,Y+
00007d 91a9      	LD   R26,Y+
00007e 9199      	LD   R25,Y+
00007f 9189      	LD   R24,Y+
000080 9179      	LD   R23,Y+
000081 9169      	LD   R22,Y+
000082 90f9      	LD   R15,Y+
000083 9019      	LD   R1,Y+
000084 9009      	LD   R0,Y+
000085 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0024 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000086 93ea      	ST   -Y,R30
000087 b7ef      	IN   R30,SREG
000088 93ea      	ST   -Y,R30
                 ; 0000 0025     if(state == WAIT_FOR_ADDRESS)
000089 e0e2      	LDI  R30,LOW(2)
00008a 15e7      	CP   R30,R7
00008b f459      	BRNE _0xB
                 ; 0000 0026     {
                 ; 0000 0027         PORTD.0 = 1;
00008c 9a90      	SBI  0x12,0
                 ; 0000 0028         deviceAddress_0 = PINB.0;
00008d e0e0      	LDI  R30,0
00008e 99b0      	SBIC 0x16,0
00008f e0e1      	LDI  R30,1
000090 2e5e      	MOV  R5,R30
                 ; 0000 0029         deviceAddress_1 = PINB.1;
000091 e0e0      	LDI  R30,0
000092 99b1      	SBIC 0x16,1
000093 e0e1      	LDI  R30,1
000094 2e4e      	MOV  R4,R30
                 ; 0000 002A         state = GET_DATA;
000095 e0e3      	LDI  R30,LOW(3)
000096 2e7e      	MOV  R7,R30
                 ; 0000 002B     }
                 ; 0000 002C }
                 _0xB:
000097 91e9      	LD   R30,Y+
000098 bfef      	OUT  SREG,R30
000099 91e9      	LD   R30,Y+
00009a 9518      	RETI
                 ; .FEND
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0033 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0034 // Declare your local variables here
                 ; 0000 0035 init();
00009b dfc0      	RCALL _init
                 ; 0000 0036 
                 ; 0000 0037 // Input/Output Ports initialization
                 ; 0000 0038 // Port A initialization
                 ; 0000 0039 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 003A DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
00009c efef      	LDI  R30,LOW(255)
00009d bbea      	OUT  0x1A,R30
                 ; 0000 003B // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 003C PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00009e e0e0      	LDI  R30,LOW(0)
00009f bbeb      	OUT  0x1B,R30
                 ; 0000 003D 
                 ; 0000 003E // Port B initialization
                 ; 0000 003F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=In Bit0=In
                 ; 0000 0040 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000a0 e0ec      	LDI  R30,LOW(12)
0000a1 bbe7      	OUT  0x17,R30
                 ; 0000 0041 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=T Bit0=T
                 ; 0000 0042 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000a2 e0e0      	LDI  R30,LOW(0)
0000a3 bbe8      	OUT  0x18,R30
                 ; 0000 0043 
                 ; 0000 0044 // Port C initialization
                 ; 0000 0045 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0046 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000a4 bbe4      	OUT  0x14,R30
                 ; 0000 0047 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0048 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000a5 bbe5      	OUT  0x15,R30
                 ; 0000 0049 
                 ; 0000 004A // Port D initialization
                 ; 0000 004B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 004C DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (1<<DDD0);
0000a6 e0e1      	LDI  R30,LOW(1)
0000a7 bbe1      	OUT  0x11,R30
                 ; 0000 004D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 004E PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000a8 e0e0      	LDI  R30,LOW(0)
0000a9 bbe2      	OUT  0x12,R30
                 ; 0000 004F 
                 ; 0000 0050 // Timer/Counter 0 initialization
                 ; 0000 0051 // Clock source: System Clock
                 ; 0000 0052 // Clock value: Timer 0 Stopped
                 ; 0000 0053 // Mode: Normal top=0xFF
                 ; 0000 0054 // OC0 output: Disconnected
                 ; 0000 0055 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000aa bfe3      	OUT  0x33,R30
                 ; 0000 0056 TCNT0=0x00;
0000ab bfe2      	OUT  0x32,R30
                 ; 0000 0057 OCR0=0x00;
0000ac bfec      	OUT  0x3C,R30
                 ; 0000 0058 
                 ; 0000 0059 // Timer/Counter 1 initialization
                 ; 0000 005A // Clock source: System Clock
                 ; 0000 005B // Clock value: Timer1 Stopped
                 ; 0000 005C // Mode: Normal top=0xFFFF
                 ; 0000 005D // OC1A output: Disconnected
                 ; 0000 005E // OC1B output: Disconnected
                 ; 0000 005F // Noise Canceler: Off
                 ; 0000 0060 // Input Capture on Falling Edge
                 ; 0000 0061 // Timer1 Overflow Interrupt: Off
                 ; 0000 0062 // Input Capture Interrupt: Off
                 ; 0000 0063 // Compare A Match Interrupt: Off
                 ; 0000 0064 // Compare B Match Interrupt: Off
                 ; 0000 0065 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000ad bdef      	OUT  0x2F,R30
                 ; 0000 0066 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000ae bdee      	OUT  0x2E,R30
                 ; 0000 0067 TCNT1H=0x00;
0000af bded      	OUT  0x2D,R30
                 ; 0000 0068 TCNT1L=0x00;
0000b0 bdec      	OUT  0x2C,R30
                 ; 0000 0069 ICR1H=0x00;
0000b1 bde7      	OUT  0x27,R30
                 ; 0000 006A ICR1L=0x00;
0000b2 bde6      	OUT  0x26,R30
                 ; 0000 006B OCR1AH=0x00;
0000b3 bdeb      	OUT  0x2B,R30
                 ; 0000 006C OCR1AL=0x00;
0000b4 bdea      	OUT  0x2A,R30
                 ; 0000 006D OCR1BH=0x00;
0000b5 bde9      	OUT  0x29,R30
                 ; 0000 006E OCR1BL=0x00;
0000b6 bde8      	OUT  0x28,R30
                 ; 0000 006F 
                 ; 0000 0070 // Timer/Counter 2 initialization
                 ; 0000 0071 // Clock source: System Clock
                 ; 0000 0072 // Clock value: Timer2 Stopped
                 ; 0000 0073 // Mode: Normal top=0xFF
                 ; 0000 0074 // OC2 output: Disconnected
                 ; 0000 0075 ASSR=0<<AS2;
0000b7 bde2      	OUT  0x22,R30
                 ; 0000 0076 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000b8 bde5      	OUT  0x25,R30
                 ; 0000 0077 TCNT2=0x00;
0000b9 bde4      	OUT  0x24,R30
                 ; 0000 0078 OCR2=0x00;
0000ba bde3      	OUT  0x23,R30
                 ; 0000 0079 
                 ; 0000 007A // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 007B TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000bb bfe9      	OUT  0x39,R30
                 ; 0000 007C 
                 ; 0000 007D // External Interrupt(s) initialization
                 ; 0000 007E // INT0: On
                 ; 0000 007F // INT0 Mode: Rising Edge
                 ; 0000 0080 // INT1: On
                 ; 0000 0081 // INT1 Mode: Rising Edge
                 ; 0000 0082 // INT2: Off
                 ; 0000 0083 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
0000bc b7eb      	IN   R30,0x3B
0000bd 6ce0      	ORI  R30,LOW(0xC0)
0000be bfeb      	OUT  0x3B,R30
                 ; 0000 0084 MCUCR=(1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
0000bf e0ef      	LDI  R30,LOW(15)
0000c0 bfe5      	OUT  0x35,R30
                 ; 0000 0085 MCUCSR=(0<<ISC2);
0000c1 e0e0      	LDI  R30,LOW(0)
0000c2 bfe4      	OUT  0x34,R30
                 ; 0000 0086 GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
0000c3 ece0      	LDI  R30,LOW(192)
0000c4 bfea      	OUT  0x3A,R30
                 ; 0000 0087 
                 ; 0000 0088 // USART initialization
                 ; 0000 0089 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 008A // USART Receiver: Off
                 ; 0000 008B // USART Transmitter: On
                 ; 0000 008C // USART Mode: Asynchronous
                 ; 0000 008D // USART Baud Rate: 9600
                 ; 0000 008E UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0000c5 e0e0      	LDI  R30,LOW(0)
0000c6 b9eb      	OUT  0xB,R30
                 ; 0000 008F UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000c7 e0e8      	LDI  R30,LOW(8)
0000c8 b9ea      	OUT  0xA,R30
                 ; 0000 0090 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0000c9 e8e6      	LDI  R30,LOW(134)
0000ca bde0      	OUT  0x20,R30
                 ; 0000 0091 UBRRH=0x00;
0000cb e0e0      	LDI  R30,LOW(0)
0000cc bde0      	OUT  0x20,R30
                 ; 0000 0092 UBRRL=0x33;
0000cd e3e3      	LDI  R30,LOW(51)
0000ce b9e9      	OUT  0x9,R30
                 ; 0000 0093 
                 ; 0000 0094 // Analog Comparator initialization
                 ; 0000 0095 // Analog Comparator: Off
                 ; 0000 0096 // The Analog Comparator's positive input is
                 ; 0000 0097 // connected to the AIN0 pin
                 ; 0000 0098 // The Analog Comparator's negative input is
                 ; 0000 0099 // connected to the AIN1 pin
                 ; 0000 009A ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000cf e8e0      	LDI  R30,LOW(128)
0000d0 b9e8      	OUT  0x8,R30
                 ; 0000 009B SFIOR=(0<<ACME);
0000d1 e0e0      	LDI  R30,LOW(0)
0000d2 bfe0      	OUT  0x30,R30
                 ; 0000 009C 
                 ; 0000 009D // ADC initialization
                 ; 0000 009E // ADC disabled
                 ; 0000 009F ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000d3 b9e6      	OUT  0x6,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // SPI initialization
                 ; 0000 00A2 // SPI disabled
                 ; 0000 00A3 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000d4 b9ed      	OUT  0xD,R30
                 ; 0000 00A4 
                 ; 0000 00A5 // TWI initialization
                 ; 0000 00A6 // TWI disabled
                 ; 0000 00A7 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000d5 bfe6      	OUT  0x36,R30
                 ; 0000 00A8 
                 ; 0000 00A9 // Global enable interrupts
                 ; 0000 00AA #asm("sei")
0000d6 9478      	sei
                 ; 0000 00AB 
                 ; 0000 00AC while (1)
                 _0xE:
                 ; 0000 00AD       {
                 ; 0000 00AE        if(state == GET_DATA)
0000d7 e0e3      	LDI  R30,LOW(3)
0000d8 15e7      	CP   R30,R7
0000d9 f481      	BRNE _0x11
                 ; 0000 00AF         {
                 ; 0000 00B0             PORTB.3 = deviceAddress_1;
0000da 2de4      	MOV  R30,R4
0000db 30e0      	CPI  R30,0
0000dc f411      	BRNE _0x12
0000dd 98c3      	CBI  0x18,3
0000de c001      	RJMP _0x13
                 _0x12:
0000df 9ac3      	SBI  0x18,3
                 _0x13:
                 ; 0000 00B1             PORTB.2 = deviceAddress_0;
0000e0 2de5      	MOV  R30,R5
0000e1 30e0      	CPI  R30,0
0000e2 f411      	BRNE _0x14
0000e3 98c2      	CBI  0x18,2
0000e4 c001      	RJMP _0x15
                 _0x14:
0000e5 9ac2      	SBI  0x18,2
                 _0x15:
                 ; 0000 00B2             //read data from mux
                 ; 0000 00B3             data = PINC;
0000e6 b293      	IN   R9,19
                 ; 0000 00B4             state = SHOW_DATA;
0000e7 e0e4      	LDI  R30,LOW(4)
0000e8 2e7e      	MOV  R7,R30
                 ; 0000 00B5         }
                 ; 0000 00B6         else if(state == SHOW_DATA)
0000e9 c024      	RJMP _0x16
                 _0x11:
0000ea e0e4      	LDI  R30,LOW(4)
0000eb 15e7      	CP   R30,R7
0000ec f509      	BRNE _0x17
                 ; 0000 00B7         {
                 ; 0000 00B8             //showing data
                 ; 0000 00B9             printf("data is %d for device %d \n\n", data, deviceAddress_0 * 2 + deviceAddress_1 );
                +
0000ed e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000ee e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000ef 93fa      	ST   -Y,R31
0000f0 93ea      	ST   -Y,R30
0000f1 2de9      	MOV  R30,R9
0000f2 27ff      	CLR  R31
0000f3 2766      	CLR  R22
0000f4 2777      	CLR  R23
0000f5 940e 02d0 	CALL __PUTPARD1
0000f7 2da5      	MOV  R26,R5
0000f8 e0e2      	LDI  R30,LOW(2)
0000f9 9fea      	MUL  R30,R26
0000fa 01f0      	MOVW R30,R0
0000fb 01df      	MOVW R26,R30
0000fc 2de4      	MOV  R30,R4
0000fd e0f0      	LDI  R31,0
0000fe 0fea      	ADD  R30,R26
0000ff 1ffb      	ADC  R31,R27
000100 940e 02c3 	CALL __CWD1
000102 940e 02d0 	CALL __PUTPARD1
000104 e088      	LDI  R24,8
000105 940e 0258 	CALL _printf
000107 962a      	ADIW R28,10
                 ; 0000 00BA             PORTA = data;
000108 ba9b      	OUT  0x1B,R9
                 ; 0000 00BB             PORTA = deviceAddress_0 * 2 + deviceAddress_1;
000109 2de5      	MOV  R30,R5
00010a 0fee      	LSL  R30
00010b 0de4      	ADD  R30,R4
00010c bbeb      	OUT  0x1B,R30
                 ; 0000 00BC             init();
00010d df4e      	RCALL _init
                 ; 0000 00BD         }
                 ; 0000 00BE 
                 ; 0000 00BF       }
                 _0x17:
                 _0x16:
00010e cfc8      	RJMP _0xE
                 ; 0000 00C0 }
                 _0x18:
00010f cfff      	RJMP _0x18
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
000110 93aa      	ST   -Y,R26
                 putchar0:
000111 9b5d           sbis usr,udre
000112 cffe           rjmp putchar0
000113 81e8           ld   r30,y
000114 b9ec           out  udr,r30
000115 9621      	ADIW R28,1
000116 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
000117 93ba      	ST   -Y,R27
000118 93aa      	ST   -Y,R26
000119 81aa      	LDD  R26,Y+2
00011a dff5      	RCALL _putchar
00011b 81a8      	LD   R26,Y
00011c 81b9      	LDD  R27,Y+1
00011d 91ed      	LD   R30,X+
00011e 91fd      	LD   R31,X+
00011f 9631      	ADIW R30,1
000120 93fe      	ST   -X,R31
000121 93ee      	ST   -X,R30
000122 9623      	ADIW R28,3
000123 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000124 93ba      	ST   -Y,R27
000125 93aa      	ST   -Y,R26
000126 9726      	SBIW R28,6
000127 940e 02d5 	CALL __SAVELOCR6
000129 e010      	LDI  R17,0
00012a 85ac      	LDD  R26,Y+12
00012b 85bd      	LDD  R27,Y+12+1
00012c e0e0      	LDI  R30,LOW(0)
00012d e0f0      	LDI  R31,HIGH(0)
00012e 93ed      	ST   X+,R30
00012f 93fc      	ST   X,R31
                 _0x2000016:
000130 89ea      	LDD  R30,Y+18
000131 89fb      	LDD  R31,Y+18+1
000132 9631      	ADIW R30,1
000133 8bea      	STD  Y+18,R30
000134 8bfb      	STD  Y+18+1,R31
000135 9731      	SBIW R30,1
000136 91e4      	LPM  R30,Z
000137 2f2e      	MOV  R18,R30
000138 30e0      	CPI  R30,0
000139 f409      	BRNE PC+2
00013a c115      	RJMP _0x2000018
00013b 2fe1      	MOV  R30,R17
00013c 30e0      	CPI  R30,0
00013d f439      	BRNE _0x200001C
00013e 3225      	CPI  R18,37
00013f f411      	BRNE _0x200001D
000140 e011      	LDI  R17,LOW(1)
000141 c002      	RJMP _0x200001E
                 _0x200001D:
000142 940e 0296 	CALL SUBOPT_0x0
                 _0x200001E:
000144 c10a      	RJMP _0x200001B
                 _0x200001C:
000145 30e1      	CPI  R30,LOW(0x1)
000146 f4a9      	BRNE _0x200001F
000147 3225      	CPI  R18,37
000148 f419      	BRNE _0x2000020
000149 940e 0296 	CALL SUBOPT_0x0
00014b c102      	RJMP _0x20000CC
                 _0x2000020:
00014c e012      	LDI  R17,LOW(2)
00014d e040      	LDI  R20,LOW(0)
00014e e000      	LDI  R16,LOW(0)
00014f 322d      	CPI  R18,45
000150 f411      	BRNE _0x2000021
000151 e001      	LDI  R16,LOW(1)
000152 c0fc      	RJMP _0x200001B
                 _0x2000021:
000153 322b      	CPI  R18,43
000154 f411      	BRNE _0x2000022
000155 e24b      	LDI  R20,LOW(43)
000156 c0f8      	RJMP _0x200001B
                 _0x2000022:
000157 3220      	CPI  R18,32
000158 f411      	BRNE _0x2000023
000159 e240      	LDI  R20,LOW(32)
00015a c0f4      	RJMP _0x200001B
                 _0x2000023:
00015b c002      	RJMP _0x2000024
                 _0x200001F:
00015c 30e2      	CPI  R30,LOW(0x2)
00015d f439      	BRNE _0x2000025
                 _0x2000024:
00015e e050      	LDI  R21,LOW(0)
00015f e013      	LDI  R17,LOW(3)
000160 3320      	CPI  R18,48
000161 f411      	BRNE _0x2000026
000162 6800      	ORI  R16,LOW(128)
000163 c0eb      	RJMP _0x200001B
                 _0x2000026:
000164 c003      	RJMP _0x2000027
                 _0x2000025:
000165 30e3      	CPI  R30,LOW(0x3)
000166 f009      	BREQ PC+2
000167 c0e7      	RJMP _0x200001B
                 _0x2000027:
000168 3320      	CPI  R18,48
000169 f010      	BRLO _0x200002A
00016a 332a      	CPI  R18,58
00016b f008      	BRLO _0x200002B
                 _0x200002A:
00016c c007      	RJMP _0x2000029
                 _0x200002B:
00016d e0aa      	LDI  R26,LOW(10)
00016e 9f5a      	MUL  R21,R26
00016f 2d50      	MOV  R21,R0
000170 2fe2      	MOV  R30,R18
000171 53e0      	SUBI R30,LOW(48)
000172 0f5e      	ADD  R21,R30
000173 c0db      	RJMP _0x200001B
                 _0x2000029:
000174 2fe2      	MOV  R30,R18
000175 36e3      	CPI  R30,LOW(0x63)
000176 f449      	BRNE _0x200002F
000177 940e 029d 	CALL SUBOPT_0x1
000179 89e8      	LDD  R30,Y+16
00017a 89f9      	LDD  R31,Y+16+1
00017b 81a4      	LDD  R26,Z+4
00017c 93aa      	ST   -Y,R26
00017d 940e 02a3 	CALL SUBOPT_0x2
00017f c0ce      	RJMP _0x2000030
                 _0x200002F:
000180 37e3      	CPI  R30,LOW(0x73)
000181 f441      	BRNE _0x2000032
000182 940e 029d 	CALL SUBOPT_0x1
000184 940e 02a9 	CALL SUBOPT_0x3
000186 940e 027d 	CALL _strlen
000188 2f1e      	MOV  R17,R30
000189 c00a      	RJMP _0x2000033
                 _0x2000032:
00018a 37e0      	CPI  R30,LOW(0x70)
00018b f461      	BRNE _0x2000035
00018c 940e 029d 	CALL SUBOPT_0x1
00018e 940e 02a9 	CALL SUBOPT_0x3
000190 940e 0289 	CALL _strlenf
000192 2f1e      	MOV  R17,R30
000193 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000194 6002      	ORI  R16,LOW(2)
000195 770f      	ANDI R16,LOW(127)
000196 e030      	LDI  R19,LOW(0)
000197 c034      	RJMP _0x2000036
                 _0x2000035:
000198 36e4      	CPI  R30,LOW(0x64)
000199 f011      	BREQ _0x2000039
00019a 36e9      	CPI  R30,LOW(0x69)
00019b f411      	BRNE _0x200003A
                 _0x2000039:
00019c 6004      	ORI  R16,LOW(4)
00019d c002      	RJMP _0x200003B
                 _0x200003A:
00019e 37e5      	CPI  R30,LOW(0x75)
00019f f431      	BRNE _0x200003C
                 _0x200003B:
0001a0 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0001a1 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001a2 83ee      	STD  Y+6,R30
0001a3 83ff      	STD  Y+6+1,R31
0001a4 e015      	LDI  R17,LOW(5)
0001a5 c00c      	RJMP _0x200003D
                 _0x200003C:
0001a6 35e8      	CPI  R30,LOW(0x58)
0001a7 f411      	BRNE _0x200003F
0001a8 6008      	ORI  R16,LOW(8)
0001a9 c003      	RJMP _0x2000040
                 _0x200003F:
0001aa 37e8      	CPI  R30,LOW(0x78)
0001ab f009      	BREQ PC+2
0001ac c0a1      	RJMP _0x2000071
                 _0x2000040:
0001ad e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001ae e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001af 83ee      	STD  Y+6,R30
0001b0 83ff      	STD  Y+6+1,R31
0001b1 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001b2 ff02      	SBRS R16,2
0001b3 c014      	RJMP _0x2000042
0001b4 940e 029d 	CALL SUBOPT_0x1
0001b6 940e 02b3 	CALL SUBOPT_0x4
0001b8 85ab      	LDD  R26,Y+11
0001b9 23aa      	TST  R26
0001ba f43a      	BRPL _0x2000043
0001bb 85ea      	LDD  R30,Y+10
0001bc 85fb      	LDD  R31,Y+10+1
0001bd 940e 02bf 	CALL __ANEGW1
0001bf 87ea      	STD  Y+10,R30
0001c0 87fb      	STD  Y+10+1,R31
0001c1 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001c2 3040      	CPI  R20,0
0001c3 f011      	BREQ _0x2000044
0001c4 5f1f      	SUBI R17,-LOW(1)
0001c5 c001      	RJMP _0x2000045
                 _0x2000044:
0001c6 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001c7 c004      	RJMP _0x2000046
                 _0x2000042:
0001c8 940e 029d 	CALL SUBOPT_0x1
0001ca 940e 02b3 	CALL SUBOPT_0x4
                 _0x2000046:
                 _0x2000036:
0001cc fd00      	SBRC R16,0
0001cd c011      	RJMP _0x2000047
                 _0x2000048:
0001ce 1715      	CP   R17,R21
0001cf f478      	BRSH _0x200004A
0001d0 ff07      	SBRS R16,7
0001d1 c008      	RJMP _0x200004B
0001d2 ff02      	SBRS R16,2
0001d3 c004      	RJMP _0x200004C
0001d4 7f0b      	ANDI R16,LOW(251)
0001d5 2f24      	MOV  R18,R20
0001d6 5011      	SUBI R17,LOW(1)
0001d7 c001      	RJMP _0x200004D
                 _0x200004C:
0001d8 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001d9 c001      	RJMP _0x200004E
                 _0x200004B:
0001da e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001db 940e 0296 	CALL SUBOPT_0x0
0001dd 5051      	SUBI R21,LOW(1)
0001de cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001df 2f31      	MOV  R19,R17
0001e0 ff01      	SBRS R16,1
0001e1 c017      	RJMP _0x200004F
                 _0x2000050:
0001e2 3030      	CPI  R19,0
0001e3 f0a1      	BREQ _0x2000052
0001e4 ff03      	SBRS R16,3
0001e5 c006      	RJMP _0x2000053
0001e6 81ee      	LDD  R30,Y+6
0001e7 81ff      	LDD  R31,Y+6+1
0001e8 9125      	LPM  R18,Z+
0001e9 83ee      	STD  Y+6,R30
0001ea 83ff      	STD  Y+6+1,R31
0001eb c005      	RJMP _0x2000054
                 _0x2000053:
0001ec 81ae      	LDD  R26,Y+6
0001ed 81bf      	LDD  R27,Y+6+1
0001ee 912d      	LD   R18,X+
0001ef 83ae      	STD  Y+6,R26
0001f0 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001f1 940e 0296 	CALL SUBOPT_0x0
0001f3 3050      	CPI  R21,0
0001f4 f009      	BREQ _0x2000055
0001f5 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001f6 5031      	SUBI R19,LOW(1)
0001f7 cfea      	RJMP _0x2000050
                 _0x2000052:
0001f8 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001f9 e320      	LDI  R18,LOW(48)
0001fa 81ee      	LDD  R30,Y+6
0001fb 81ff      	LDD  R31,Y+6+1
0001fc 940e 02cc 	CALL __GETW1PF
0001fe 87e8      	STD  Y+8,R30
0001ff 87f9      	STD  Y+8+1,R31
000200 81ee      	LDD  R30,Y+6
000201 81ff      	LDD  R31,Y+6+1
000202 9632      	ADIW R30,2
000203 83ee      	STD  Y+6,R30
000204 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000205 85e8      	LDD  R30,Y+8
000206 85f9      	LDD  R31,Y+8+1
000207 85aa      	LDD  R26,Y+10
000208 85bb      	LDD  R27,Y+10+1
000209 17ae      	CP   R26,R30
00020a 07bf      	CPC  R27,R31
00020b f050      	BRLO _0x200005C
00020c 5f2f      	SUBI R18,-LOW(1)
00020d 85a8      	LDD  R26,Y+8
00020e 85b9      	LDD  R27,Y+8+1
00020f 85ea      	LDD  R30,Y+10
000210 85fb      	LDD  R31,Y+10+1
000211 1bea      	SUB  R30,R26
000212 0bfb      	SBC  R31,R27
000213 87ea      	STD  Y+10,R30
000214 87fb      	STD  Y+10+1,R31
000215 cfef      	RJMP _0x200005A
                 _0x200005C:
000216 332a      	CPI  R18,58
000217 f028      	BRLO _0x200005D
000218 ff03      	SBRS R16,3
000219 c002      	RJMP _0x200005E
00021a 5f29      	SUBI R18,-LOW(7)
00021b c001      	RJMP _0x200005F
                 _0x200005E:
00021c 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00021d fd04      	SBRC R16,4
00021e c01a      	RJMP _0x2000061
00021f 3321      	CPI  R18,49
000220 f420      	BRSH _0x2000063
000221 85a8      	LDD  R26,Y+8
000222 85b9      	LDD  R27,Y+8+1
000223 9711      	SBIW R26,1
000224 f409      	BRNE _0x2000062
                 _0x2000063:
000225 c009      	RJMP _0x20000CD
                 _0x2000062:
000226 1753      	CP   R21,R19
000227 f010      	BRLO _0x2000067
000228 ff00      	SBRS R16,0
000229 c001      	RJMP _0x2000068
                 _0x2000067:
00022a c013      	RJMP _0x2000066
                 _0x2000068:
00022b e220      	LDI  R18,LOW(32)
00022c ff07      	SBRS R16,7
00022d c00b      	RJMP _0x2000069
00022e e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00022f 6100      	ORI  R16,LOW(16)
000230 ff02      	SBRS R16,2
000231 c007      	RJMP _0x200006A
000232 7f0b      	ANDI R16,LOW(251)
000233 934a      	ST   -Y,R20
000234 940e 02a3 	CALL SUBOPT_0x2
000236 3050      	CPI  R21,0
000237 f009      	BREQ _0x200006B
000238 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000239 940e 0296 	CALL SUBOPT_0x0
00023b 3050      	CPI  R21,0
00023c f009      	BREQ _0x200006C
00023d 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00023e 5031      	SUBI R19,LOW(1)
00023f 85a8      	LDD  R26,Y+8
000240 85b9      	LDD  R27,Y+8+1
000241 9712      	SBIW R26,2
000242 f008      	BRLO _0x2000059
000243 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000244 ff00      	SBRS R16,0
000245 c008      	RJMP _0x200006D
                 _0x200006E:
000246 3050      	CPI  R21,0
000247 f031      	BREQ _0x2000070
000248 5051      	SUBI R21,LOW(1)
000249 e2e0      	LDI  R30,LOW(32)
00024a 93ea      	ST   -Y,R30
00024b 940e 02a3 	CALL SUBOPT_0x2
00024d cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00024e e010      	LDI  R17,LOW(0)
                 _0x200001B:
00024f cee0      	RJMP _0x2000016
                 _0x2000018:
000250 85ac      	LDD  R26,Y+12
000251 85bd      	LDD  R27,Y+12+1
000252 940e 02c8 	CALL __GETW1P
000254 940e 02dc 	CALL __LOADLOCR6
000256 9664      	ADIW R28,20
000257 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000258 92ff      	PUSH R15
000259 2ef8      	MOV  R15,R24
00025a 9726      	SBIW R28,6
00025b 931a      	ST   -Y,R17
00025c 930a      	ST   -Y,R16
00025d 01de      	MOVW R26,R28
00025e 9614      	ADIW R26,4
00025f 940e 02bb 	CALL __ADDW2R15
000261 018d      	MOVW R16,R26
000262 e0e0      	LDI  R30,LOW(0)
000263 83ec      	STD  Y+4,R30
000264 83ed      	STD  Y+4+1,R30
000265 83ee      	STD  Y+6,R30
000266 83ef      	STD  Y+6+1,R30
000267 01de      	MOVW R26,R28
000268 9618      	ADIW R26,8
000269 940e 02bb 	CALL __ADDW2R15
00026b 940e 02c8 	CALL __GETW1P
00026d 93fa      	ST   -Y,R31
00026e 93ea      	ST   -Y,R30
00026f 931a      	ST   -Y,R17
000270 930a      	ST   -Y,R16
000271 e1e7      	LDI  R30,LOW(_put_usart_G100)
000272 e0f1      	LDI  R31,HIGH(_put_usart_G100)
000273 93fa      	ST   -Y,R31
000274 93ea      	ST   -Y,R30
000275 01de      	MOVW R26,R28
000276 9618      	ADIW R26,8
000277 deac      	RCALL __print_G100
000278 8119      	LDD  R17,Y+1
000279 8108      	LDD  R16,Y+0
00027a 9628      	ADIW R28,8
00027b 90ff      	POP  R15
00027c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00027d 93ba      	ST   -Y,R27
00027e 93aa      	ST   -Y,R26
00027f 91a9          ld   r26,y+
000280 91b9          ld   r27,y+
000281 27ee          clr  r30
000282 27ff          clr  r31
                 strlen0:
000283 916d          ld   r22,x+
000284 2366          tst  r22
000285 f011          breq strlen1
000286 9631          adiw r30,1
000287 cffb          rjmp strlen0
                 strlen1:
000288 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000289 93ba      	ST   -Y,R27
00028a 93aa      	ST   -Y,R26
00028b 27aa          clr  r26
00028c 27bb          clr  r27
00028d 91e9          ld   r30,y+
00028e 91f9          ld   r31,y+
                 strlenf0:
00028f 9005      	lpm  r0,z+
000290 2000          tst  r0
000291 f011          breq strlenf1
000292 9611          adiw r26,1
000293 cffb          rjmp strlenf0
                 strlenf1:
000294 01fd          movw r30,r26
000295 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
000296 932a      	ST   -Y,R18
000297 85ad      	LDD  R26,Y+13
000298 85be      	LDD  R27,Y+13+1
000299 85ef      	LDD  R30,Y+15
00029a 89f8      	LDD  R31,Y+15+1
00029b 9509      	ICALL
00029c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
00029d 89e8      	LDD  R30,Y+16
00029e 89f9      	LDD  R31,Y+16+1
00029f 9734      	SBIW R30,4
0002a0 8be8      	STD  Y+16,R30
0002a1 8bf9      	STD  Y+16+1,R31
0002a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0002a3 85ad      	LDD  R26,Y+13
0002a4 85be      	LDD  R27,Y+13+1
0002a5 85ef      	LDD  R30,Y+15
0002a6 89f8      	LDD  R31,Y+15+1
0002a7 9509      	ICALL
0002a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
0002a9 89a8      	LDD  R26,Y+16
0002aa 89b9      	LDD  R27,Y+16+1
0002ab 9614      	ADIW R26,4
0002ac 940e 02c8 	CALL __GETW1P
0002ae 83ee      	STD  Y+6,R30
0002af 83ff      	STD  Y+6+1,R31
0002b0 81ae      	LDD  R26,Y+6
0002b1 81bf      	LDD  R27,Y+6+1
0002b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
0002b3 89a8      	LDD  R26,Y+16
0002b4 89b9      	LDD  R27,Y+16+1
0002b5 9614      	ADIW R26,4
0002b6 940e 02c8 	CALL __GETW1P
0002b8 87ea      	STD  Y+10,R30
0002b9 87fb      	STD  Y+10+1,R31
0002ba 9508      	RET
                 
                 
                 	.CSEG
                 __ADDW2R15:
0002bb 2400      	CLR  R0
0002bc 0daf      	ADD  R26,R15
0002bd 1db0      	ADC  R27,R0
0002be 9508      	RET
                 
                 __ANEGW1:
0002bf 95f1      	NEG  R31
0002c0 95e1      	NEG  R30
0002c1 40f0      	SBCI R31,0
0002c2 9508      	RET
                 
                 __CWD1:
0002c3 2f6f      	MOV  R22,R31
0002c4 0f66      	ADD  R22,R22
0002c5 0b66      	SBC  R22,R22
0002c6 2f76      	MOV  R23,R22
0002c7 9508      	RET
                 
                 __GETW1P:
0002c8 91ed      	LD   R30,X+
0002c9 91fc      	LD   R31,X
0002ca 9711      	SBIW R26,1
0002cb 9508      	RET
                 
                 __GETW1PF:
0002cc 9005      	LPM  R0,Z+
0002cd 91f4      	LPM  R31,Z
0002ce 2de0      	MOV  R30,R0
0002cf 9508      	RET
                 
                 __PUTPARD1:
0002d0 937a      	ST   -Y,R23
0002d1 936a      	ST   -Y,R22
0002d2 93fa      	ST   -Y,R31
0002d3 93ea      	ST   -Y,R30
0002d4 9508      	RET
                 
                 __SAVELOCR6:
0002d5 935a      	ST   -Y,R21
                 __SAVELOCR5:
0002d6 934a      	ST   -Y,R20
                 __SAVELOCR4:
0002d7 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002d8 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002d9 931a      	ST   -Y,R17
0002da 930a      	ST   -Y,R16
0002db 9508      	RET
                 
                 __LOADLOCR6:
0002dc 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0002dd 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0002de 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002df 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002e0 8119      	LDD  R17,Y+1
0002e1 8108      	LD   R16,Y
0002e2 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  10 r1 :   2 r2 :   0 r3 :   0 r4 :   5 r5 :   5 r6 :   1 r7 :   8 
r8 :   0 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  30 r17:  19 r18:  27 r19:   8 r20:   9 r21:  17 r22:  12 r23:   5 
r24:   8 r25:   3 r26:  53 r27:  27 r28:  11 r29:   1 r30: 194 r31:  50 
x  :  12 y  : 152 z  :   6 
Registers used: 27 out of 35 (77.1%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   5 
adiw  :  15 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  11 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   0 brne  :  24 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  33 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  15 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   6 cpc   :   1 cpi   :  31 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   0 jmp   :  22 ld    :  27 ldd   :  57 ldi   :  73 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  25 movw  :   7 
mul   :   2 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   7 out   :  51 pop   :   1 push  :   1 rcall :   5 ret   :  20 
reti  :   2 rjmp  :  55 rol   :   0 ror   :   0 sbc   :   2 sbci  :   1 
sbi   :   4 sbic  :   2 sbis  :   1 sbiw  :   8 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  53 std   :  28 sts   :   0 sub   :   1 subi  :  13 swap  :   0 
tst   :   3 wdr   :   0 
Instructions used: 51 out of 116 (44.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0005c6   1432     46   1478   32768   4.5%
[.dseg] 0x000060 0x000260      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
