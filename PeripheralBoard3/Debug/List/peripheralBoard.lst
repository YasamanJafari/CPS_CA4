
AVRASM ver. 2.1.30  \\Mac\Home\Desktop\CPS\CA4\CPS_CA4\PeripheralBoard3\Debug\List\peripheralBoard.asm Tue Apr 30 15:47:29 2019

\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\PeripheralBoard3\Debug\List\peripheralBoard.asm(1088): warning: Register r4 already defined by the .DEF directive
\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\PeripheralBoard3\Debug\List\peripheralBoard.asm(1089): warning: Register r5 already defined by the .DEF directive
\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\PeripheralBoard3\Debug\List\peripheralBoard.asm(1090): warning: Register r6 already defined by the .DEF directive
\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\PeripheralBoard3\Debug\List\peripheralBoard.asm(1091): warning: Register r7 already defined by the .DEF directive
\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\PeripheralBoard3\Debug\List\peripheralBoard.asm(1092): warning: Register r8 already defined by the .DEF directive
\\Mac\Home\Desktop\CPS\CA4\CPS_CA4\PeripheralBoard3\Debug\List\peripheralBoard.asm(1093): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _temprature=R4
                 	.DEF _temprature_msb=R5
                 	.DEF _state=R6
                 	.DEF _state_msb=R7
                 	.DEF _timer=R8
                 	.DEF _timer_msb=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0033 	JMP  __RESET
000002 940c 006e 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 00ac 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 __RESET:
000033 94f8      	CLI
000034 27ee      	CLR  R30
000035 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000036 e0f1      	LDI  R31,1
000037 bffb      	OUT  GICR,R31
000038 bfeb      	OUT  GICR,R30
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003a e08d      	LDI  R24,(14-2)+1
00003b e0a2      	LDI  R26,2
00003c 27bb      	CLR  R27
                 __CLEAR_REG:
00003d 93ed      	ST   X+,R30
00003e 958a      	DEC  R24
00003f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000040 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000041 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000042 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000043 93ed      	ST   X+,R30
000044 9701      	SBIW R24,1
000045 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000046 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000047 bfed      	OUT  SPL,R30
000048 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000049 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004b e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004c 940c 00e5 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 4/27/2019
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;#define CHECK_TEMP 1
                 ;#define RAISE_INTERRUPT 2
                 ;#define WAIT_FOR_ACK 3
                 ;#define ADDRESS_0 1
                 ;#define ADDRESS_1 1
                 ;#define TEMP_THRESHOLD 80
                 ;// Declare your global variables here
                 ;int temprature;
                 ;int state;
                 ;int timer;
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 002C {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 002D ADMUX=adc_input | ADC_VREF_TYPE;
00004e 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00004f 81e8      	LD   R30,Y
000050 64e0      	ORI  R30,0x40
000051 b9e7      	OUT  0x7,R30
                 ; 0000 002E // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 002F delay_us(10);
                +
000052 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000053 958a     +DEC R24
000054 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0030 // Start the AD conversion
                 ; 0000 0031 ADCSRA|=(1<<ADSC);
000055 9a36      	SBI  0x6,6
                 ; 0000 0032 // Wait for the AD conversion to complete
                 ; 0000 0033 while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000056 9b34      	SBIS 0x6,4
000057 cffe      	RJMP _0x3
                 ; 0000 0034 ADCSRA|=(1<<ADIF);
000058 9a34      	SBI  0x6,4
                 ; 0000 0035 return ADCW;
000059 b1e4      	IN   R30,0x4
00005a b1f5      	IN   R31,0x4+1
00005b 9621      	ADIW R28,1
00005c 9508      	RET
                 ; 0000 0036 }
                 ; .FEND
                 ;void init()
                 ; 0000 0038 {
                 _init:
                 ; .FSTART _init
                 ; 0000 0039     state = CHECK_TEMP;
00005d e0e1      	LDI  R30,LOW(1)
00005e e0f0      	LDI  R31,HIGH(1)
00005f 013f      	MOVW R6,R30
                 ; 0000 003A     temprature = 0;
000060 2444      	CLR  R4
000061 2455      	CLR  R5
                 ; 0000 003B     timer = 0;
000062 2488      	CLR  R8
000063 2499      	CLR  R9
                 ; 0000 003C     PORTC = 0;
000064 e0e0      	LDI  R30,LOW(0)
000065 bbe5      	OUT  0x15,R30
                 ; 0000 003D     PORTB.0 = 0;
000066 98c0      	CBI  0x18,0
                 ; 0000 003E     PORTB.1 = 0;
000067 98c1      	CBI  0x18,1
                 ; 0000 003F     PORTA.2 = 0;
000068 98da      	CBI  0x1B,2
                 ; 0000 0040     PORTA.0 = 0;
000069 98d8      	CBI  0x1B,0
                 ; 0000 0041     PORTD.0 = 0;
00006a 9890      	CBI  0x12,0
                 ; 0000 0042     timer = 0;
00006b 2488      	CLR  R8
00006c 2499      	CLR  R9
                 ; 0000 0043 }
00006d 9508      	RET
                 ; .FEND
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0046 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00006e 93ea      	ST   -Y,R30
00006f 93fa      	ST   -Y,R31
000070 b7ef      	IN   R30,SREG
000071 93ea      	ST   -Y,R30
                 ; 0000 0047 // Place your code here
                 ; 0000 0048     if(state == WAIT_FOR_ACK)
000072 e0e3      	LDI  R30,LOW(3)
000073 e0f0      	LDI  R31,HIGH(3)
000074 15e6      	CP   R30,R6
000075 05f7      	CPC  R31,R7
000076 f579      	BRNE _0x10
                 ; 0000 0049     {
                 ; 0000 004A         //put temprature on pins
                 ; 0000 004B         PORTC.0 = temprature & 1;
000077 fc40      	SBRC R4,0
000078 c002      	RJMP _0x11
000079 98a8      	CBI  0x15,0
00007a c001      	RJMP _0x12
                 _0x11:
00007b 9aa8      	SBI  0x15,0
                 _0x12:
                 ; 0000 004C         PORTC.1 = temprature & 2;
00007c fc41      	SBRC R4,1
00007d c002      	RJMP _0x13
00007e 98a9      	CBI  0x15,1
00007f c001      	RJMP _0x14
                 _0x13:
000080 9aa9      	SBI  0x15,1
                 _0x14:
                 ; 0000 004D         PORTC.2 = temprature & 4;
000081 fc42      	SBRC R4,2
000082 c002      	RJMP _0x15
000083 98aa      	CBI  0x15,2
000084 c001      	RJMP _0x16
                 _0x15:
000085 9aaa      	SBI  0x15,2
                 _0x16:
                 ; 0000 004E         PORTC.3 = temprature & 8;
000086 fc43      	SBRC R4,3
000087 c002      	RJMP _0x17
000088 98ab      	CBI  0x15,3
000089 c001      	RJMP _0x18
                 _0x17:
00008a 9aab      	SBI  0x15,3
                 _0x18:
                 ; 0000 004F         PORTC.4 = temprature & 16;
00008b fc44      	SBRC R4,4
00008c c002      	RJMP _0x19
00008d 98ac      	CBI  0x15,4
00008e c001      	RJMP _0x1A
                 _0x19:
00008f 9aac      	SBI  0x15,4
                 _0x1A:
                 ; 0000 0050         PORTC.5 = temprature & 32;
000090 fc45      	SBRC R4,5
000091 c002      	RJMP _0x1B
000092 98ad      	CBI  0x15,5
000093 c001      	RJMP _0x1C
                 _0x1B:
000094 9aad      	SBI  0x15,5
                 _0x1C:
                 ; 0000 0051         PORTC.6 = temprature & 64;
000095 fc46      	SBRC R4,6
000096 c002      	RJMP _0x1D
000097 98ae      	CBI  0x15,6
000098 c001      	RJMP _0x1E
                 _0x1D:
000099 9aae      	SBI  0x15,6
                 _0x1E:
                 ; 0000 0052         PORTC.7 = temprature & 128;
00009a fc47      	SBRC R4,7
00009b c002      	RJMP _0x1F
00009c 98af      	CBI  0x15,7
00009d c001      	RJMP _0x20
                 _0x1F:
00009e 9aaf      	SBI  0x15,7
                 _0x20:
                 ; 0000 0053         //put address
                 ; 0000 0054         PORTB.0 = ADDRESS_0;
00009f 9ac0      	SBI  0x18,0
                 ; 0000 0055         PORTB.1 = ADDRESS_1;
0000a0 9ac1      	SBI  0x18,1
                 ; 0000 0056         //raise interrupt indicating my work is finished
                 ; 0000 0057         PORTD.0 = 1;
0000a1 9a90      	SBI  0x12,0
                 ; 0000 0058         state = CHECK_TEMP;
0000a2 e0e1      	LDI  R30,LOW(1)
0000a3 e0f0      	LDI  R31,HIGH(1)
0000a4 013f      	MOVW R6,R30
                 ; 0000 0059         //init();
                 ; 0000 005A     }
                 ; 0000 005B     else
0000a5 c001      	RJMP _0x27
                 _0x10:
                 ; 0000 005C     {
                 ; 0000 005D         //transfer interrupt in daisy chain
                 ; 0000 005E         PORTA.2 = 1;
0000a6 9ada      	SBI  0x1B,2
                 ; 0000 005F     }
                 _0x27:
                 ; 0000 0060 
                 ; 0000 0061 }
0000a7 91e9      	LD   R30,Y+
0000a8 bfef      	OUT  SREG,R30
0000a9 91f9      	LD   R31,Y+
0000aa 91e9      	LD   R30,Y+
0000ab 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0066 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000ac 920a      	ST   -Y,R0
0000ad 921a      	ST   -Y,R1
0000ae 92fa      	ST   -Y,R15
0000af 936a      	ST   -Y,R22
0000b0 937a      	ST   -Y,R23
0000b1 938a      	ST   -Y,R24
0000b2 939a      	ST   -Y,R25
0000b3 93aa      	ST   -Y,R26
0000b4 93ba      	ST   -Y,R27
0000b5 93ea      	ST   -Y,R30
0000b6 93fa      	ST   -Y,R31
0000b7 b7ef      	IN   R30,SREG
0000b8 93ea      	ST   -Y,R30
                 ; 0000 0067 // Reinitialize Timer 0 value
                 ; 0000 0068 TCNT0=0x16;
0000b9 e1e6      	LDI  R30,LOW(22)
0000ba bfe2      	OUT  0x32,R30
                 ; 0000 0069     timer ++;
0000bb 01f4      	MOVW R30,R8
0000bc 9631      	ADIW R30,1
0000bd 014f      	MOVW R8,R30
                 ; 0000 006A     if(state == CHECK_TEMP && timer > 10)
0000be e0e1      	LDI  R30,LOW(1)
0000bf e0f0      	LDI  R31,HIGH(1)
0000c0 15e6      	CP   R30,R6
0000c1 05f7      	CPC  R31,R7
0000c2 f429      	BRNE _0x2B
0000c3 e0ea      	LDI  R30,LOW(10)
0000c4 e0f0      	LDI  R31,HIGH(10)
0000c5 15e8      	CP   R30,R8
0000c6 05f9      	CPC  R31,R9
0000c7 f00c      	BRLT _0x2C
                 _0x2B:
0000c8 c00e      	RJMP _0x2A
                 _0x2C:
                 ; 0000 006B     {
                 ; 0000 006C         init();
0000c9 df93      	RCALL _init
                 ; 0000 006D 
                 ; 0000 006E         temprature = (read_adc(1)/2);
0000ca e0a1      	LDI  R26,LOW(1)
0000cb df82      	RCALL _read_adc
0000cc 95f6      	LSR  R31
0000cd 95e7      	ROR  R30
0000ce 012f      	MOVW R4,R30
                 ; 0000 006F         if(temprature > TEMP_THRESHOLD)
0000cf e5e0      	LDI  R30,LOW(80)
0000d0 e0f0      	LDI  R31,HIGH(80)
0000d1 15e4      	CP   R30,R4
0000d2 05f5      	CPC  R31,R5
0000d3 f41c      	BRGE _0x2D
                 ; 0000 0070         {
                 ; 0000 0071             state = RAISE_INTERRUPT;
0000d4 e0e2      	LDI  R30,LOW(2)
0000d5 e0f0      	LDI  R31,HIGH(2)
0000d6 013f      	MOVW R6,R30
                 ; 0000 0072         }
                 ; 0000 0073     }
                 _0x2D:
                 ; 0000 0074 
                 ; 0000 0075 }
                 _0x2A:
0000d7 91e9      	LD   R30,Y+
0000d8 bfef      	OUT  SREG,R30
0000d9 91f9      	LD   R31,Y+
0000da 91e9      	LD   R30,Y+
0000db 91b9      	LD   R27,Y+
0000dc 91a9      	LD   R26,Y+
0000dd 9199      	LD   R25,Y+
0000de 9189      	LD   R24,Y+
0000df 9179      	LD   R23,Y+
0000e0 9169      	LD   R22,Y+
0000e1 90f9      	LD   R15,Y+
0000e2 9019      	LD   R1,Y+
0000e3 9009      	LD   R0,Y+
0000e4 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 007A {
                 _main:
                 ; .FSTART _main
                 ; 0000 007B // Declare your local variables here
                 ; 0000 007C init();
0000e5 df77      	RCALL _init
                 ; 0000 007D 
                 ; 0000 007E // Input/Output Ports initialization
                 ; 0000 007F // Port A initialization
                 ; 0000 0080 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=In Bit0=Out
                 ; 0000 0081 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (1<<DDA2) | (0<<DDA1) | (1<<DDA0);
0000e6 e0e5      	LDI  R30,LOW(5)
0000e7 bbea      	OUT  0x1A,R30
                 ; 0000 0082 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=T Bit0=0
                 ; 0000 0083 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000e8 e0e0      	LDI  R30,LOW(0)
0000e9 bbeb      	OUT  0x1B,R30
                 ; 0000 0084 
                 ; 0000 0085 // Port B initialization
                 ; 0000 0086 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
                 ; 0000 0087 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
0000ea e0e3      	LDI  R30,LOW(3)
0000eb bbe7      	OUT  0x17,R30
                 ; 0000 0088 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
                 ; 0000 0089 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000ec e0e0      	LDI  R30,LOW(0)
0000ed bbe8      	OUT  0x18,R30
                 ; 0000 008A 
                 ; 0000 008B // Port C initialization
                 ; 0000 008C // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 008D DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000ee efef      	LDI  R30,LOW(255)
0000ef bbe4      	OUT  0x14,R30
                 ; 0000 008E // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 008F PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000f0 e0e0      	LDI  R30,LOW(0)
0000f1 bbe5      	OUT  0x15,R30
                 ; 0000 0090 
                 ; 0000 0091 // Port D initialization
                 ; 0000 0092 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 0093 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (1<<DDD0);
0000f2 e0e1      	LDI  R30,LOW(1)
0000f3 bbe1      	OUT  0x11,R30
                 ; 0000 0094 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 0095 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000f4 e0e0      	LDI  R30,LOW(0)
0000f5 bbe2      	OUT  0x12,R30
                 ; 0000 0096 
                 ; 0000 0097 // Timer/Counter 0 initialization
                 ; 0000 0098 // Clock source: System Clock
                 ; 0000 0099 // Clock value: 7.813 kHz
                 ; 0000 009A // Mode: Normal top=0xFF
                 ; 0000 009B // OC0 output: Disconnected
                 ; 0000 009C // Timer Period: 29.952 ms
                 ; 0000 009D TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
0000f6 e0e5      	LDI  R30,LOW(5)
0000f7 bfe3      	OUT  0x33,R30
                 ; 0000 009E TCNT0=0x16;
0000f8 e1e6      	LDI  R30,LOW(22)
0000f9 bfe2      	OUT  0x32,R30
                 ; 0000 009F OCR0=0x00;
0000fa e0e0      	LDI  R30,LOW(0)
0000fb bfec      	OUT  0x3C,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // Timer/Counter 1 initialization
                 ; 0000 00A2 // Clock source: System Clock
                 ; 0000 00A3 // Clock value: Timer1 Stopped
                 ; 0000 00A4 // Mode: Normal top=0xFFFF
                 ; 0000 00A5 // OC1A output: Disconnected
                 ; 0000 00A6 // OC1B output: Disconnected
                 ; 0000 00A7 // Noise Canceler: Off
                 ; 0000 00A8 // Input Capture on Falling Edge
                 ; 0000 00A9 // Timer1 Overflow Interrupt: Off
                 ; 0000 00AA // Input Capture Interrupt: Off
                 ; 0000 00AB // Compare A Match Interrupt: Off
                 ; 0000 00AC // Compare B Match Interrupt: Off
                 ; 0000 00AD TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000fc bdef      	OUT  0x2F,R30
                 ; 0000 00AE TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000fd bdee      	OUT  0x2E,R30
                 ; 0000 00AF TCNT1H=0x00;
0000fe bded      	OUT  0x2D,R30
                 ; 0000 00B0 TCNT1L=0x00;
0000ff bdec      	OUT  0x2C,R30
                 ; 0000 00B1 ICR1H=0x00;
000100 bde7      	OUT  0x27,R30
                 ; 0000 00B2 ICR1L=0x00;
000101 bde6      	OUT  0x26,R30
                 ; 0000 00B3 OCR1AH=0x00;
000102 bdeb      	OUT  0x2B,R30
                 ; 0000 00B4 OCR1AL=0x00;
000103 bdea      	OUT  0x2A,R30
                 ; 0000 00B5 OCR1BH=0x00;
000104 bde9      	OUT  0x29,R30
                 ; 0000 00B6 OCR1BL=0x00;
000105 bde8      	OUT  0x28,R30
                 ; 0000 00B7 
                 ; 0000 00B8 // Timer/Counter 2 initialization
                 ; 0000 00B9 // Clock source: System Clock
                 ; 0000 00BA // Clock value: Timer2 Stopped
                 ; 0000 00BB // Mode: Normal top=0xFF
                 ; 0000 00BC // OC2 output: Disconnected
                 ; 0000 00BD ASSR=0<<AS2;
000106 bde2      	OUT  0x22,R30
                 ; 0000 00BE TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000107 bde5      	OUT  0x25,R30
                 ; 0000 00BF TCNT2=0x00;
000108 bde4      	OUT  0x24,R30
                 ; 0000 00C0 OCR2=0x00;
000109 bde3      	OUT  0x23,R30
                 ; 0000 00C1 
                 ; 0000 00C2 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00C3 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
00010a e0e1      	LDI  R30,LOW(1)
00010b bfe9      	OUT  0x39,R30
                 ; 0000 00C4 
                 ; 0000 00C5 // External Interrupt(s) initialization
                 ; 0000 00C6 // INT0: On
                 ; 0000 00C7 // INT0 Mode: Rising Edge
                 ; 0000 00C8 // INT1: Off
                 ; 0000 00C9 // INT2: Off
                 ; 0000 00CA GICR|=(0<<INT1) | (1<<INT0) | (0<<INT2);
00010c b7eb      	IN   R30,0x3B
00010d 64e0      	ORI  R30,0x40
00010e bfeb      	OUT  0x3B,R30
                 ; 0000 00CB MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);
00010f e0e3      	LDI  R30,LOW(3)
000110 bfe5      	OUT  0x35,R30
                 ; 0000 00CC MCUCSR=(0<<ISC2);
000111 e0e0      	LDI  R30,LOW(0)
000112 bfe4      	OUT  0x34,R30
                 ; 0000 00CD GIFR=(0<<INTF1) | (1<<INTF0) | (0<<INTF2);
000113 e4e0      	LDI  R30,LOW(64)
000114 bfea      	OUT  0x3A,R30
                 ; 0000 00CE 
                 ; 0000 00CF // USART initialization
                 ; 0000 00D0 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00D1 // USART Receiver: Off
                 ; 0000 00D2 // USART Transmitter: On
                 ; 0000 00D3 // USART Mode: Asynchronous
                 ; 0000 00D4 // USART Baud Rate: 9600
                 ; 0000 00D5 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
000115 e0e0      	LDI  R30,LOW(0)
000116 b9eb      	OUT  0xB,R30
                 ; 0000 00D6 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000117 e0e8      	LDI  R30,LOW(8)
000118 b9ea      	OUT  0xA,R30
                 ; 0000 00D7 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
000119 e8e6      	LDI  R30,LOW(134)
00011a bde0      	OUT  0x20,R30
                 ; 0000 00D8 UBRRH=0x00;
00011b e0e0      	LDI  R30,LOW(0)
00011c bde0      	OUT  0x20,R30
                 ; 0000 00D9 UBRRL=0x33;
00011d e3e3      	LDI  R30,LOW(51)
00011e b9e9      	OUT  0x9,R30
                 ; 0000 00DA 
                 ; 0000 00DB // Analog Comparator initialization
                 ; 0000 00DC // Analog Comparator: Off
                 ; 0000 00DD // The Analog Comparator's positive input is
                 ; 0000 00DE // connected to the AIN0 pin
                 ; 0000 00DF // The Analog Comparator's negative input is
                 ; 0000 00E0 // connected to the AIN1 pin
                 ; 0000 00E1 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00011f e8e0      	LDI  R30,LOW(128)
000120 b9e8      	OUT  0x8,R30
                 ; 0000 00E2 
                 ; 0000 00E3 // ADC initialization
                 ; 0000 00E4 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 00E5 // ADC Voltage Reference: AREF pin
                 ; 0000 00E6 // ADC Auto Trigger Source: Free Running
                 ; 0000 00E7 // Only the 8 most significant bits of
                 ; 0000 00E8 // the AD conversion result are used
                 ; 0000 00E9 ADMUX=ADC_VREF_TYPE;
000121 e4e0      	LDI  R30,LOW(64)
000122 b9e7      	OUT  0x7,R30
                 ; 0000 00EA ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000123 eae3      	LDI  R30,LOW(163)
000124 b9e6      	OUT  0x6,R30
                 ; 0000 00EB SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000125 e0e0      	LDI  R30,LOW(0)
000126 bfe0      	OUT  0x30,R30
                 ; 0000 00EC 
                 ; 0000 00ED // SPI initialization
                 ; 0000 00EE // SPI disabled
                 ; 0000 00EF SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000127 b9ed      	OUT  0xD,R30
                 ; 0000 00F0 
                 ; 0000 00F1 // TWI initialization
                 ; 0000 00F2 // TWI disabled
                 ; 0000 00F3 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000128 bfe6      	OUT  0x36,R30
                 ; 0000 00F4 
                 ; 0000 00F5 // Global enable interrupts
                 ; 0000 00F6 #asm("sei")
000129 9478      	sei
                 ; 0000 00F7 while (1)
                 _0x2E:
                 ; 0000 00F8     {
                 ; 0000 00F9     // Place your code here
                 ; 0000 00FA     switch(state)
00012a 01f3      	MOVW R30,R6
                 ; 0000 00FB     {
                 ; 0000 00FC     case RAISE_INTERRUPT:
00012b 30e2      	CPI  R30,LOW(0x2)
00012c e0a0      	LDI  R26,HIGH(0x2)
00012d 07fa      	CPC  R31,R26
00012e f421      	BRNE _0x33
                 ; 0000 00FD         PORTA.0 = 1;
00012f 9ad8      	SBI  0x1B,0
                 ; 0000 00FE         state = WAIT_FOR_ACK;
000130 e0e3      	LDI  R30,LOW(3)
000131 e0f0      	LDI  R31,HIGH(3)
000132 013f      	MOVW R6,R30
                 ; 0000 00FF         break;
                 ; 0000 0100     }
                 _0x33:
                 ; 0000 0101     }
000133 cff6      	RJMP _0x2E
                 ; 0000 0102 }
                 _0x37:
000134 cfff      	RJMP _0x37
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   2 r1 :   2 r2 :   0 r3 :   0 r4 :  11 r5 :   2 r6 :   7 r7 :   2 
r8 :   5 r9 :   3 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   2 
r24:   8 r25:   3 r26:   8 r27:   3 r28:   2 r29:   1 r30: 120 r31:  21 
x  :   2 y  :  32 z  :   0 
Registers used: 21 out of 35 (60.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   2 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   0 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   0 brne  :   6 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  13 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   5 cpi   :   1 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   0 jmp   :  22 ld    :  16 ldd   :   0 ldi   :  55 
lds   :   0 lpm   :   0 lsl   :   0 lsr   :   1 mov   :   0 movw  :   8 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   2 out   :  52 pop   :   0 push  :   0 rcall :   3 ret   :   2 
reti  :   2 rjmp  :  21 rol   :   0 ror   :   1 sbc   :   0 sbci  :   0 
sbi   :  15 sbic  :   0 sbis  :   1 sbiw  :   1 sbr   :   0 sbrc  :   8 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  18 std   :   0 sts   :   0 sub   :   0 subi  :   0 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 30 out of 116 (25.9%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00026a    600     18    618   32768   1.9%
[.dseg] 0x000060 0x000260      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
